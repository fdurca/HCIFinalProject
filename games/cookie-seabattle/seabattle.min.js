!function r(o, s, l) {
    function u(t, e) {
        if (!s[t]) {
            if (!o[t]) {
                var n = "function" == typeof require && require;
                if (!e && n)
                    return n(t, !0);
                if (c)
                    return c(t, !0);
                var a = new Error("Cannot find module '" + t + "'");
                throw a.code = "MODULE_NOT_FOUND",
                a
            }
            var i = s[t] = {
                exports: {}
            };
            o[t][0].call(i.exports, function(e) {
                return u(o[t][1][e] || e)
            }, i, i.exports, r, o, s, l)
        }
        return s[t].exports
    }
    for (var c = "function" == typeof require && require, e = 0; e < l.length; e++)
        u(l[e]);
    return u
}({
    1: [function(e, t, n) {
        "use strict";
        Object.values || (Object.values = function(e) {
            var t = [];
            for (var n in e)
                e.hasOwnProperty(n) && t.push(e[n]);
            return t
        }
        );
        e("../shared/game");
        var k, s = e("./seabattle"), l = e("../shared/statistics"), u = e("../shared/util"), a = e("../shared/helper-functions"), i = a.addDelaysToFunctions, r = a.ArrayUtils, S = a.captainsLog, o = e("./seabattle-computer-player"), c = e("./seabattle-remote-player"), d = e("./seabattle-human-player"), h = e("./seabattle-web-renderer"), f = e("../shared/temp-storage"), p = e("../shared/multiplayer/multiplayer-game-client"), m = e("../shared/multiplayer/multiplayer-challenge-client"), g = e("./seabattle-encrypt").decrypt, y = e("../shared/gamecontrol"), v = u.qs;
        u.trackEvent.PROBABILITY = 1;
        var C = new f(slug);
        new m(slug);
        function A() {
            if (u.qs.gid)
                location.href = "/seabattle/";
            else if ($(".sad").removeClass("sad"),
            $(".ship").remove(),
            $("[data-cell]").removeClass(),
            $(".bubble").hide(),
            $("body").removeClass("human-ready"),
            $("html").addClass("setup"),
            $("#ready-to-start button").removeAttr("disabled"),
            k = new s(new h),
            window.game = k,
            v.autoplay)
                k.start(new o(players.bottom.name,"bottom-player"), new o(players.top.name,"top-player"));
            else {
                var e, t = new o(players.top.name,"top-player");
                "1" === u.cake("opponentstart") ? (u.cake("opponentstart", "0", 10),
                e = t) : u.cake("opponentstart", "1", 10),
                k.start(new d(players.bottom.name,"bottom-player"), t, e)
            }
        }
        y.addRestartHandler(A),
        i(o.prototype, {
            play: 1500
        }),
        $(function() {
            var letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];
            var numbers = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"];

            l.checkAbandonedMultiplayerGame(),     
            window.addEventListener("keydown", function(e) {
                if(["Space","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].indexOf(e.code) > -1) {
                    e.preventDefault();
                }
            }, false);       
            $("#their-ships [data-cell]").on("mousedown touchstart", function(e) {
                e.preventDefault();
                var t = $(this).data("cell");
                if (k.p1.activeSquare){
                    k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                    k.p1.activeSquare = null;
                }
                k.p1 && k.p1.isHuman && k.p1.clickSquare(t)
            }),
            document.addEventListener('keydown', function(e) {
                if (e.keyCode === 13 && k.p1.activeSquare) {
                    k.p1 && k.p1.isHuman && k.p1.clickSquare(k.p1.activeSquare);
                    k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                    k.p1.activeSquare = null;
                } else if (e.keyCode === 37) {
                    if (!k.p1.activeSquare){
                        k.p1.activeSquare = "A1";
                        k.p1 && k.p1.isHuman && k.p1.selectSquare("A1");
                    } else {
                        if (letters.indexOf(k.p1.activeSquare.substring(0,1)) != 0){
                            k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                            k.p1 && k.p1.isHuman && k.p1.selectSquare(letters[letters.indexOf(k.p1.activeSquare.substring(0,1)) - 1].concat(k.p1.activeSquare.substring(1,2)));
                            k.p1.activeSquare = letters[letters.indexOf(k.p1.activeSquare.substring(0,1)) - 1].concat(k.p1.activeSquare.substring(1,2));
                        }
                    }
                } else if (e.keyCode === 39) {
                    if (!k.p1.activeSquare){
                        k.p1.activeSquare = "A1";
                        k.p1 && k.p1.isHuman && k.p1.selectSquare(k.p1.activeSquare);
                    } else {
                        if (letters.indexOf(k.p1.activeSquare.substring(0,1)) != 9){
                            k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                            k.p1 && k.p1.isHuman && k.p1.selectSquare(letters[letters.indexOf(k.p1.activeSquare.substring(0,1)) + 1].concat(k.p1.activeSquare.substring(1,2)));
                            k.p1.activeSquare = letters[letters.indexOf(k.p1.activeSquare.substring(0,1)) + 1].concat(k.p1.activeSquare.substring(1,2));
                        }
                    }
                } else if (e.keyCode === 38) {
                    if (!k.p1.activeSquare){
                        k.p1.activeSquare = "A1"
                        k.p1 && k.p1.isHuman && k.p1.selectSquare(k.p1.activeSquare);
                    } else {
                        if (numbers.indexOf(k.p1.activeSquare.substring(1,2)) != 0){
                            k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                            k.p1 && k.p1.isHuman && k.p1.selectSquare(k.p1.activeSquare.substring(0,1).concat(numbers[numbers.indexOf(k.p1.activeSquare.substring(1,2)) - 1]));
                            k.p1.activeSquare = k.p1.activeSquare.substring(0,1).concat(numbers[numbers.indexOf(k.p1.activeSquare.substring(1,2)) - 1]);
                        }
                    }
                } else if (e.keyCode === 40) {
                    if (!k.p1.activeSquare){
                        k.p1.activeSquare = "A1"
                        k.p1 && k.p1.isHuman && k.p1.selectSquare(k.p1.activeSquare);
                    } else {
                        if (numbers.indexOf(k.p1.activeSquare.substring(1,2)) != 9){
                            k.p1 && k.p1.isHuman && k.p1.deselectSquare(k.p1.activeSquare);
                            k.p1 && k.p1.isHuman && k.p1.selectSquare(k.p1.activeSquare.substring(0,1).concat(numbers[numbers.indexOf(k.p1.activeSquare.substring(1,2)) + 1]));
                            k.p1.activeSquare = k.p1.activeSquare.substring(0,1).concat(numbers[numbers.indexOf(k.p1.activeSquare.substring(1,2)) + 1]);
                        }
                    }
                }
            });
              
            $("#play-with-sounds").on("click", function(e) {
                $("#cover, #sound-warning").fadeOut(),
                u.settings.set("hasGottenSoundWarning", !0),
                u.settings.set("sounds", !0),
                k.p1.readyToStart(),
                $("#sound-warning button").attr("disabled", "disabled"),
                k.placeShips(k.p1, k.p1.ships)
            }),
            $("#play-silently").on("click", function(e) {
                $("#cover, #sound-warning").fadeOut(),
                u.settings.set("hasGottenSoundWarning", !0),
                u.settings.set("sounds", !1),
                $("#sound-warning button").attr("disabled", "disabled"),
                k.p1.readyToStart()
            }),
            $("#ready-to-start button").on("click", function(e) {
                $("#ready-to-start button").attr("disabled", "disabled"),
                u.settings.set("sounds", !1),
                u.settings.hasGottenSoundWarning,
                k.p1.readyToStart(),
                k.started = true;
            }),
            $(document).on("keypress", function(e) {
                if (e.keyCode === 13 && !k.started) {
                    $("#ready-to-start button").attr("disabled", "disabled"),
                    u.settings.set("sounds", !1),
                    u.settings.set("hasGottenSoundWarning", !0),
                    k.p1.readyToStart(),
                    k.started = true;
                }
            });
            ;
            var b = {};
            function w(e) {
                if (e.type.match(/touch/)) {
                    var t = e.originalEvent.touches[0];
                    return {
                        pageX: t.pageX,
                        pageY: t.pageY
                    }
                }
                return {
                    pageX: e.pageX,
                    pageY: e.pageY
                }
            }
            $("#your-ships").on("mousedown touchstart", ".ship", function(e) {
                if (0 !== $(".setup").length) {
                    S.debug(e.type),
                    e.preventDefault();
                    var t = w(e)
                      , n = t.pageX
                      , a = t.pageY;
                    S.debug("px " + n + "pagey " + a);
                    var i = $(e.target).attr("data-cell-id")
                      , r = k.p1.ships.find(function(e) {
                        return e.find(function(e) {
                            return e.id === i
                        })
                    })
                      , o = $("#your-ships [data-cell]").width();
                    b.clickedSquareId = i;
                    var s = r
                      , l = Array.isArray(s)
                      , u = 0;
                    for (s = l ? s : s[Symbol.iterator](); ; ) {
                        var c;
                        if (l) {
                            if (u >= s.length)
                                break;
                            c = s[u++]
                        } else {
                            if ((u = s.next()).done)
                                break;
                            c = u.value
                        }
                        var d = c
                          , h = $('#your-ships [data-cell="' + d.id + '"]').offset()
                          , f = h.top
                          , p = h.left;
                        if (p <= n && n < p + o && f <= a && a < f + o) {
                            b.clickedSquareId = d.id;
                            break
                        }
                    }
                    b.squareWidth = $("#your-ships [data-cell]").width() + 1,
                    b.ship = e.target,
                    b.startX = n,
                    b.startY = a,
                    b.startLeft = parseInt(b.ship.style.left),
                    b.startTop = parseInt(b.ship.style.top),
                    b.shipObject = r,
                    b.startSquare = i;
                    var m = r
                      , g = Array.isArray(m)
                      , y = 0;
                    for (m = g ? m : m[Symbol.iterator](); ; ) {
                        var v;
                        if (g) {
                            if (y >= m.length)
                                break;
                            v = m[y++]
                        } else {
                            if ((y = m.next()).done)
                                break;
                            v = y.value
                        }
                        $('#your-ships [data-cell="' + v.id + '"]').removeClass("ship-square")
                    }
                    $(b.ship).addClass("drag").css("z-index", 2323)
                }
            }),
            $(document).on("mousemove touchmove", function(e) {
                if (b.ship) {
                    e.preventDefault(),
                    S.debug(e.type);
                    var t = w(e)
                      , n = t.pageX
                      , a = t.pageY
                      , i = n - b.startX
                      , r = a - b.startY
                      , o = b.startLeft + i
                      , s = b.startTop + r
                      , l = $(b.ship).width()
                      , u = $(b.ship).height();
                    o = Math.max(0, o),
                    s = Math.max(-1, s);
                    o = Math.min(o, 10 * b.squareWidth - l - 5),
                    s = Math.min(s, 10 * b.squareWidth - u - 6);
                    var c = Math.max(Math.floor(s / b.squareWidth), 0)
                      , d = Math.floor(o / b.squareWidth);
                    o - d * b.squareWidth > b.squareWidth / 2 && d++,
                    s - c * b.squareWidth > b.squareWidth / 2 && c++;
                    var h = "ABCDEFGHIJ".charAt(d) + (c + 1)
                      , f = d * b.squareWidth
                      , p = c * b.squareWidth - 1;
                    h !== b.startSquare && (b.hasMoved = !0),
                    k.canPlaceShipAtSquare(k.p1, b.shipObject, h) ? (b.dropSquare = h,
                    $(b.ship).removeClass("cant-drop")) : (delete b.dropSquare,
                    $(b.ship).addClass("cant-drop")),
                    o = f,
                    s = p,
                    b.ship.style.left = o + "px",
                    b.ship.style.top = s + "px"
                }
            }),
            $(document).on("mouseup touchend", function(e) {
                if (b.ship) {
                    e.preventDefault(),
                    $(b.ship).css("z-index", 1);
                    var i = b;
                    b.hasMoved ? b.dropSquare ? (S.debug("Moving to " + b.dropSquare),
                    k.moveShip(k.p1, b.shipObject, b.dropSquare)) : (S.debug("NO DROPSQUARE"),
                    $(b.ship).animate({
                        left: b.startLeft,
                        top: b.startTop
                    }, 150, function() {
                        $(i.ship).removeClass("drag");
                        var e = i.shipObject
                          , t = Array.isArray(e)
                          , n = 0;
                        for (e = t ? e : e[Symbol.iterator](); ; ) {
                            var a;
                            if (t) {
                                if (n >= e.length)
                                    break;
                                a = e[n++]
                            } else {
                                if ((n = e.next()).done)
                                    break;
                                a = n.value
                            }
                            $('#your-ships [data-cell="' + a.id + '"]').addClass("ship-square")
                        }
                    }).removeClass("cant-drop")) : (S.debug("Not dropping, same place..."),
                    !b.hasMoved && 1 < b.shipObject.length && (S.debug("Rotating"),
                    k.rotateShip(k.p1, b.shipObject, b.clickedSquareId))),
                    b = {}
                }
            }),
            $("#your-ships [data-cell], #your-ships .ship").on("mousedown touchstart", function(e) {
                if (!(0 < $(".setup").length)) {
                    k.renderer.message(r.random(["Why are you trying to shoot your own ships?", "Those are your own ships, don't shoot at them!", "Maybe try shooting at your opponent's ships instead?", "What are you doing? Those are your own ships!", "These are not the <del>droids</del> ships you're looking for!"]))
                }
            }),
            $("#start-new-game").on("click touchstart", function(e) {
                e.preventDefault(),
                $("body").removeClass("show-results"),
                u.trackEvent("Restart"),
                $(".sad").removeClass("sad"),
                u.ads.trigger(function() {
                    u.isMobileLookActive() && !u.qs.gid ? A() : u.reloadPage()
                })
            }),
            $("#final-board").on("click", function(e) {
                e.preventDefault(),
                $("body").removeClass("show-results")
            }),
            u.qs.gid ? function() {
                k = new s(new h);
                var a = new d(players.bottom.name,"bottom-player")
                  , i = new c(players.top.name,players.top.code,"top-player")
                  , r = C.get(u.qs.gid);
                C.remove(u.qs.gid),
                a.multiplayer = !0,
                a.multiplayerId = r.players[0].id,
                i.multiplayer = !0,
                i.multiplayerId = r.players[1].id,
                $(".face-top-player").addClass("offline p-" + i.multiplayerId),
                $(".face-bottom-player").addClass("p-" + a.multiplayerId);
                var e = new p(slug,r,[a, i]);
                k.renderer.setMultiplayer(e);
                var o = $("#ready-to-start button, #randomize, #concede, #speak");
                o.attr("disabled", "disabled"),
                $("#message-box").text("Waiting for other player to connect..."),
                e.on("players-ready", function() {
                    k.message("Both players are ready, starting the game. Place your ships!"),
                    l.startMultiplayerChallengeGame(i),
                    y.startGame();
                    var e = r.initialDealerId === a.multiplayerId ? a : i;
                    try {
                        var t = C.get("lastShips");
                        if (t) {
                            a.shipPlacements = g(t);
                            var n = 10 === a.shipPlacements.length;
                            (n = (n = (n = (n = n && 1 === a.shipPlacements.filter(function(e) {
                                return 4 === e.length
                            }).length) && 2 === a.shipPlacements.filter(function(e) {
                                return 3 === e.length
                            }).length) && 3 === a.shipPlacements.filter(function(e) {
                                return 2 === e.length
                            }).length) && 4 === a.shipPlacements.filter(function(e) {
                                return 1 === e.length
                            }).length) || ($("html").css("filter", "grayscale(1)"),
                            $("body").css("transform", "rotate(5deg)"),
                            "dev.cardgames.io" !== location.hostname && u.forceTrackEvent("HackerMoron", "Hi buddy. Check the console. SeaBattle tampering. Ships: " + JSON.stringify(a.shipPlacements) + ". Name: " + a.name),
                            setTimeout(function() {
                                return console.log("%cHi buddy. How about stopping now? I'm lazy and don't really feel like doing this back and forth (although it was very funny that you changed your name to HackerMoron 😂). Obviously you're having a lot of fun with the browser developer tools, but can you just let the old people here play in peace during Covid? Thanks!", "color:blue; font-size:16px")
                            }, 3e3),
                            setTimeout(function() {
                                return $("#concede-confirm").click()
                            }, 2e3),
                            delete a.shipPlacements),
                            window._lastShips = t
                        }
                        C.remove("lastShips")
                    } catch (e) {
                        u.trackEvent("DecryptError", e.toString(), 0, "", "", 1)
                    }
                    k.start(a, i, e),
                    o.removeAttr("disabled")
                }),
                e.on("forcequit", function(e) {
                    k.forceQuit(e.data.player, e.data.reason)
                }),
                e.connect()
            }() : A()
        })
    }
    , {
        "../shared/game": 11,
        "../shared/gamecontrol": 12,
        "../shared/helper-functions": 13,
        "../shared/multiplayer/multiplayer-challenge-client": 14,
        "../shared/multiplayer/multiplayer-game-client": 15,
        "../shared/statistics": 21,
        "../shared/temp-storage": 22,
        "../shared/util": 23,
        "./seabattle": 8,
        "./seabattle-computer-player": 2,
        "./seabattle-encrypt": 3,
        "./seabattle-human-player": 4,
        "./seabattle-remote-player": 5,
        "./seabattle-web-renderer": 7
    }],
    2: [function(e, t, n) {
        "use strict";
        function x(e) {
            return e[Math.floor(Math.random() * e.length)]
        }
        var a = function() {
            function e(e, t) {
                this.name = e,
                this.id = t
            }
            var t = e.prototype;
            return t.init = function(e) {
                this.game = e,
                this.game.placeShips(this, this.ships)
            }
            ,
            t.opponentReady = function() {}
            ,
            t.play = function() {
                var e, t, r = this, o = Object.values(this.opponentSquares), n = o.filter(function(e) {
                    return "ship-hit" === e.state
                });
                if (0 < n.length) {
                    var s = []
                      , a = function() {
                        if (u) {
                            if (c >= l.length)
                                return "break";
                            d = l[c++]
                        } else {
                            if ((c = l.next()).done)
                                return "break";
                            d = c.value
                        }
                        var t = d
                          , e = o.find(function(e) {
                            // console.log(e.row);
                            // console.log(t.col);
                            return e.row === t.row && e.col === t.col - 1
                        })
                          , n = o.find(function(e) {
                            return e.row === t.row && e.col === t.col + 1
                        })
                          , a = o.find(function(e) {
                            return e.row === t.row - 1 && e.col === t.col
                        })
                          , i = o.find(function(e) {
                            return e.row === t.row + 1 && e.col === t.col
                        });
                        return e && "ship-hit" === e.state && n && "unknown" === n.state ? {
                            v: r.game.shoot(r, n.id)
                        } : n && "ship-hit" === n.state && e && "unknown" === e.state ? {
                            v: r.game.shoot(r, e.id)
                        } : a && "ship-hit" === a.state && i && "unknown" === i.state ? {
                            v: r.game.shoot(r, i.id)
                        } : i && "ship-hit" === i.state && a && "unknown" === a.state ? {
                            v: r.game.shoot(r, a.id)
                        } : void s.push.apply(s, [e, n, a, i].filter(function(e) {
                            return !!e && "unknown" === e.state
                        }))
                    };
                    var l = n
                      , u = Array.isArray(l)
                      , c = 0;
                    e: for (l = u ? l : l[Symbol.iterator](); ; ) {
                        var d, i = a();
                        switch (i) {
                        case "break":
                            break e;
                        default:
                            if ("object" == typeof i)
                                return i.v
                        }
                    }
                    var h = x(s);
                    h = h || x(o.filter(function(e) {
                        return "unknown" === e.state
                    })),
                    this.game.shoot(this, h.id)
                } else {
                    var f = o.filter(function(e) {
                        return "unknown" === e.state
                    });
                    if (Math.random() < .8) {
                        var p = x(f);
                        this.game.shoot(this, p.id)
                    } else {
                        var m = 0
                          , g = f
                          , y = Array.isArray(g)
                          , v = 0;
                        for (g = y ? g : g[Symbol.iterator](); ; ) {
                            var b;
                            if (y) {
                                if (v >= g.length)
                                    break;
                                b = g[v++]
                            } else {
                                if ((v = g.next()).done)
                                    break;
                                b = v.value
                            }
                            var w = b;
                            w.rank = 0;
                            var k = f
                              , S = Array.isArray(k)
                              , $ = 0;
                            for (k = S ? k : k[Symbol.iterator](); ; ) {
                                var C;
                                if (S) {
                                    if ($ >= k.length)
                                        break;
                                    C = k[$++]
                                } else {
                                    if (($ = k.next()).done)
                                        break;
                                    C = $.value
                                }
                                C !== w && (e = w,
                                t = C,
                                Math.abs(e.col - t.col) <= 1 && Math.abs(e.row - t.row) <= 1) && w.rank++
                            }
                            w.rank > m && (m = w.rank)
                        }
                        var A = x(f.filter(function(e) {
                            return e.rank === m
                        }));
                        this.game.shoot(this, A.id)
                    }
                }
            }
            ,
            t.toString = function() {
                return this.name
            }
            ,
            e
        }();
        t.exports = a
    }
    , {}],
    3: [function(e, t, n) {
        "use strict";
        var m = "pqowieurytTURIEOWPQN"
          , g = "HGJFKDLSAYhgjfkBMVXC"
          , y = "znxbcvdlsamZ"
          , v = "ABCDEFGHIJ";
        t.exports = {
            encrypt: function(e) {
                var t = ""
                  , n = e
                  , a = Array.isArray(n)
                  , i = 0;
                for (n = a ? n : n[Symbol.iterator](); ; ) {
                    var r;
                    if (a) {
                        if (i >= n.length)
                            break;
                        r = n[i++]
                    } else {
                        if ((i = n.next()).done)
                            break;
                        r = i.value
                    }
                    var o = r
                      , s = o
                      , l = Array.isArray(s)
                      , u = 0;
                    for (s = l ? s : s[Symbol.iterator](); ; ) {
                        var c;
                        if (l) {
                            if (u >= s.length)
                                break;
                            c = s[u++]
                        } else {
                            if ((u = s.next()).done)
                                break;
                            c = u.value
                        }
                        var d = c
                          , h = d.charAt(0)
                          , f = parseInt(d.substr(1)) - 1
                          , p = v.indexOf(h);
                        t += m.charAt(Math.random() < .5 ? 10 + p : p),
                        t += g.charAt(Math.random() < .5 ? 10 + f : f)
                    }
                    o !== e[e.length - 1] && (t += y.charAt(Math.floor(Math.random() * y.length)))
                }
                return t
            },
            decrypt: function(e) {
                for (var t = y.charAt(0), n = 1; n < y.length; n++)
                    t += "|" + y.charAt(n);
                var a = []
                  , i = e.split(new RegExp(t))
                  , r = Array.isArray(i)
                  , o = 0;
                for (i = r ? i : i[Symbol.iterator](); ; ) {
                    var s;
                    if (r) {
                        if (o >= i.length)
                            break;
                        s = i[o++]
                    } else {
                        if ((o = i.next()).done)
                            break;
                        s = o.value
                    }
                    for (var l = s, u = [], c = 0; c < l.length; c += 2) {
                        var d = l.charAt(c)
                          , h = l.charAt(c + 1);
                        d = v.charAt(m.indexOf(d) % 10),
                        h = g.indexOf(h) % 10 + 1,
                        u.push(d + h)
                    }
                    a.push(u)
                }
                return a
            }
        }
    }
    , {}],
    4: [function(e, t, n) {
        "use strict";
        var a = e("../shared/multiplayer/multiplayer-util").AutoPlayTimer
          , o = e("../shared/util")
          , i = function() {
            function e(e, t) {
                var n = this;
                this.name = e,
                this.id = t,
                this.isHuman = !0,
                this.timer = new a(function(e) {
                    return n.message(e)
                }
                )
            }
            var t = e.prototype;
            return t.init = function(e) {
                var t = this;
                this.game = e,
                $("#randomize").on("click", function() {
                    return t.randomShips()
                }),
                this.multiplayer && (this.organizeStart = (new Date).getTime())
            }
            ,
            t.opponentReady = function() {
                var e = this;
                if (this.multiplayer && !this.hasPlacedShips) {
                    var t = 40 - Math.floor(((new Date).getTime() - this.organizeStart) / 1e3);
                    t < 20 && (t = 20),
                    this.timer.start(t, function() {
                        e.game.forceQuit(e, "timeout")
                    }, 'Hurry up and press "Ready to start"! You will forfeit the game in $REMAINING$ seconds...')
                }
            }
            ,    
        
            t.play = function() {
                var e = this;
                this.playing = !0,
                Object.values(this.opponentSquares).every(function(e) {
                    return "unknown" === e.state
                }) && this.message("Your turn! Click a square on the opponents board to shoot at it."),
                this.multiplayer && this.timer.start(25, function() {
                    e.game.forceQuit(e, "timeout")
                }, "Hurry up! You will forfeit the game in $REMAINING$ seconds...")
            }
            ,
            t.readyToStart = function() {
                if (this.timer.stop(),
                this.hasPlacedShips = !0,
                this.game.areShipsIllegallyTouching(this.ships)) {
                    var e = []
                      , t = this.ships
                      , n = Array.isArray(t)
                      , a = 0;
                    for (t = n ? t : t[Symbol.iterator](); ; ) {
                        var i;
                        if (n) {
                            if (a >= t.length)
                                break;
                            i = t[a++]
                        } else {
                            if ((a = t.next()).done)
                                break;
                            i = a.value
                        }
                        var r = i;
                        e.push(r.map(function(e) {
                            return e.id
                        }))
                    }
                    $("html").css("filter", "grayscale(1)"),
                    $("body").css("transform", "rotate(5deg)"),
                    o.forceTrackEvent("HackerMoron", "Hi there. Check the console. SHIPS: " + JSON.stringify(e) + ", lastships " + window._lastShips),
                    setTimeout(function() {
                        return console.log("%cHi buddy. How about stopping now? I'm lazy and don't really feel like doing this back and forth (although it was very funny that you changed your name to HackerMoron 😂). Obviously you're having a lot of fun with the browser developer tools, but can you just let the old people here play in peace during Covid? Thanks!", "color:blue; font-size:16px")
                    }, 2e3)
                }
                this.game.placeShips(this, this.ships)
            }
            ,
            t.randomShips = function() {
                this.game.randomizeShips(this)
            }
            ,
            t.selectSquare = function(e) {
                var t = this.opponentSquares[e].state;
                this.game.selsquare(this, e);
            },
            t.deselectSquare = function(e){
                var t = this.opponentSquares[e].state;
                this.game.deselsquare(this, e);
            }
            ,
            t.clickSquare = function(e) {
                if (this.game.win)
                    this.message("The game is over, you can't shoot now!");
                else if (this.playing) {
                    var t = this.opponentSquares[e].state;
                    "ship-adjacent" === t ? this.message("There can't be a ship there, it's too close to another ship!") : "shot-miss" === t ? this.message("You've already shot at that square!") : "ship-hit" === t ? this.message("You've already hit that part of the ship, try the one next to it!") : "ship-sunk" === t ? this.message("You've already sunk that ship!") : (this.playing = !1,
                    this.timer.stop(),
                    this.game.shoot(this, e))
                } else
                    0 < $(".setup").length ? this.message('Finish arranging your ships and then click "Ready to start"') : this.message("It's not your turn to play!")
            }
            ,
            t.message = function(e) {
                $("#message-box").text(""),
                $("#message-box").html(e)
            }
            ,
            t.toString = function() {
                return this.name
            }
            ,
            e
        }();
        t.exports = i
    }
    , {
        "../shared/multiplayer/multiplayer-util": 16,
        "../shared/util": 23
    }],
    5: [function(e, t, n) {
        "use strict";
        var k = e("../shared/helper-functions").captainsLog
          , S = e("./seabattle-encrypt").decrypt
          , $ = e("../shared/util")
          , C = window.setTimeout;
        var a = function() {
            function e(e, t, n) {
                this.name = e,
                this.face = t,
                this.id = n,
                this.multiplayerMoves = []
            }
            var t = e.prototype;
            return t.init = function(e) {
                var t = this;
                if (this.game = e,
                this.shouldMakeSubstituteMove())
                    this.game.forceQuit(this, "abandon");
                else if (this.checkForLocalTimeout())
                    this.game.forceQuit(this, "localtimeout");
                else {
                    var n = this.multiplayerMoves.shift();
                    if (n) {
                        if (k.debug(this.name + ": Got move: " + JSON.stringify(n)),
                        "ready" !== n.type)
                            throw new Error("Unexpected move: " + n.type);
                        this.clearLocalTimeout();
                        var a = [];
                        if ("HackerMoron" === this.name) {
                            var i = S(n.key);
                            $.forceTrackEvent("HackerMoron", "SHIPS: " + JSON.stringify(i))
                        }
                        var r = S(n.key)
                          , o = r
                          , s = Array.isArray(o)
                          , l = 0;
                        for (o = s ? o : o[Symbol.iterator](); ; ) {
                            var u;
                            if (s) {
                                if (l >= o.length)
                                    break;
                                u = o[l++]
                            } else {
                                if ((l = o.next()).done)
                                    break;
                                u = l.value
                            }
                            var c = u;
                            a.push(c.map(function(e) {
                                return t.squares[e]
                            }))
                        }
                        var d = 10 === a.length;
                        d = (d = (d = (d = d && 1 === a.filter(function(e) {
                            return 4 === e.length
                        }).length) && 2 === a.filter(function(e) {
                            return 3 === e.length
                        }).length) && 3 === a.filter(function(e) {
                            return 2 === e.length
                        }).length) && 4 === a.filter(function(e) {
                            return 1 === e.length
                        }).length;
                        var h = r
                          , f = Array.isArray(h)
                          , p = 0;
                        for (h = f ? h : h[Symbol.iterator](); ; ) {
                            var m;
                            if (f) {
                                if (p >= h.length)
                                    break;
                                m = h[p++]
                            } else {
                                if ((p = h.next()).done)
                                    break;
                                m = p.value
                            }
                            var g = m
                              , y = Array.isArray(g)
                              , v = 0;
                            for (g = y ? g : g[Symbol.iterator](); ; ) {
                                var b;
                                if (y) {
                                    if (v >= g.length)
                                        break;
                                    b = g[v++]
                                } else {
                                    if ((v = g.next()).done)
                                        break;
                                    b = v.value
                                }
                                var w = b;
                                void 0 === this.squares[w] && (d = !1)
                            }
                        }
                        if (this.game.areShipsIllegallyTouching(a) && (d = !1),
                        !d)
                            return this.game.forceQuit(this, "illegalmove"),
                            void $.forceTrackEvent("HackerMoron", "Ended game. Ships: " + JSON.stringify(r));
                        this.hasPlacedShips = !0,
                        this.game.placeShips(this, a)
                    } else
                        C(function() {
                            return t.init(e)
                        }, 500)
                }
            }
            ,
            t.opponentReady = function() {
                this.waitStart || this.hasPlacedShips || (this.waitStart = (new Date).getTime())
            }
            ,
            t.checkForLocalTimeout = function() {
                return !this._noTimer && (!!this.waitStart && 5e4 < (new Date).getTime() - this.waitStart)
            }
            ,
            t.clearLocalTimeout = function() {
                delete this.waitStart
            }
            ,
            t.play = function() {
                var e = this;
                if (this.shouldMakeSubstituteMove())
                    this.game.forceQuit(this, "abandon");
                else if (this.waitStart || (this.waitStart = (new Date).getTime()),
                this.checkForLocalTimeout())
                    this.game.forceQuit(this, "localtimeout");
                else {
                    var t = this.multiplayerMoves.shift();
                    t ? (k.debug(this.name + ": Got move: " + JSON.stringify(t)),
                    "shoot" === t.type ? (this.clearLocalTimeout(),
                    this.game.shoot(this, t.squareId)) : ($.trackEvent("Error", "GOT BAD MOVE IN PLAY: " + JSON.stringify(t)),
                    C(function() {
                        return e.play()
                    }, 500))) : C(function() {
                        return e.play()
                    }, 500)
                }
            }
            ,
            t.toString = function() {
                return this.name
            }
            ,
            e
        }();
        t.exports = a
    }
    , {
        "../shared/helper-functions": 13,
        "../shared/util": 23,
        "./seabattle-encrypt": 3
    }],
    6: [function(e, t, n) {
        "use strict";
        var a = e("../shared/audio-player")
          , i = e("../shared/util")
          , r = new a({
            shoot: "/seabattle/sounds/shoot.mp3",
            hit: "/seabattle/sounds/hit.mp3",
            win: "/seabattle/sounds/win.mp3",
            lose: "/seabattle/sounds/lose.mp3"
        },function() {
            return i.settings.sounds
        }
        ,i.qs.debug);
        t.exports = r
    }
    , {
        "../shared/audio-player": 10,
        "../shared/util": 23
    }],
    7: [function(e, t, n) {
        "use strict";
        var i = e("../shared/statistics")
          , r = e("../shared/util")
          , c = e("../shared/helper-functions").captainsLog
          , o = (e("../shared/game"),
        e("../shared/helper-functions")._setTimeout,
        e("../shared/gamecontrol"))
          , d = e("./seabattle-sounds")
          , m = e("./seabattle-encrypt").encrypt
          , a = e("../shared/temp-storage")
          , s = function() {
            function e() {
                this.multiplayer = !1,
                this.storage = new a(slug)
            }
            var t = e.prototype;
            return t.setMultiplayer = function(e) {
                this.multiplayerClient = e,
                this.multiplayer = !0
            }
            ,
            t.message = function(e) {
                console.log(e.msg || e),
                $("#message-box").text(""),
                $("#message-box").html(e.msg || e)
            }
            ,
            t.start = function(e) {
                r.trackEvent("StartGame"),
                this.createShips(e.p1),
                this.message('Drag ships into the position you want them (click to rotate) and then click "Ready to start"'),
                e.p1.stats = {
                    shots: 0
                },
                e.p2.stats = {
                    shots: 0
                },
                e.callback()
            }
            ,
            t.createShips = function(e) {
                $("#your-ships .ship").remove(),
                $(".ship-square").removeClass("ship-square");
                var t = e.ships
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i;
                    this.createShipDiv("#your-ships .row-container", r);
                    var o = r
                      , s = Array.isArray(o)
                      , l = 0;
                    for (o = s ? o : o[Symbol.iterator](); ; ) {
                        var u;
                        if (s) {
                            if (l >= o.length)
                                break;
                            u = o[l++]
                        } else {
                            if ((l = o.next()).done)
                                break;
                            u = l.value
                        }
                        $('#your-ships [data-cell="' + u.id + '"]').addClass("ship-square")
                    }
                }
            }
            ,
            t.randomizeShips = function(e) {
                this.createShips(e.player)
            }
            ,
            t.createShipDiv = function(e, t, n) {
                var a = $("[data-cell]").width() + 1
                  , i = $("<div>").addClass("ship").attr("data-cell-id", t[0].id);
                n && i.addClass(n);
                var r = "w1"
                  , o = "h1";
                t[0].row === t[t.length - 1].row ? r = "w" + t.length : o = "h" + t.length;
                var s = (t[0].col - 1) * a
                  , l = (t[0].row - 1) * a - 1;
                i.css({
                    top: l,
                    left: s
                }).addClass(o).addClass(r).appendTo(e)
            }
            ,
            t.playerReady = function(e) {
                if (c.debug("Player " + e.player.name + " is ready"),
                this.multiplayer && "bottom-player" === e.player.id) {
                    var t = []
                      , n = e.player.ships
                      , a = Array.isArray(n)
                      , i = 0;
                    for (n = a ? n : n[Symbol.iterator](); ; ) {
                        var r;
                        if (a) {
                            if (i >= n.length)
                                break;
                            r = n[i++]
                        } else {
                            if ((i = n.next()).done)
                                break;
                            r = i.value
                        }
                        var o = r;
                        t.push(o.map(function(e) {
                            return e.id
                        }))
                    }
                    this.multiplayerClient.sendMove({
                        type: "ready",
                        key: m(t)
                    })
                }
                $("#" + e.player.id + "-bubble p span").text("Ready"),
                $("#" + e.player.id + "-bubble").fadeIn(),
                this.multiplayer && "bottom-player" === e.player.id && "ready" !== e.player.opponent.state && this.message("Waiting for " + e.player.opponent.name + " to finish placing their ships..."),
                setTimeout(function() {
                    return $("#" + e.player.id + "-bubble").fadeOut()
                }, 3e3),
                "bottom-player" === e.player.id && ($("#open-player-picker").fadeOut(),
                this.setShipsToPercentages(e.player),
                $("body").addClass("human-ready"),
                $("html").removeClass("setup")),
                setTimeout(e.callback, 0)
            }
            ,
            t.setShipsToPercentages = function(e) {
                var t = e.ships
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i
                      , o = 10 * (r[0].row - 1) + "%"
                      , s = 10 * (r[0].col - 1) + "%";
                    $('#your-ships [data-cell-id="' + r[0].id + '"]').css({
                        top: o,
                        left: s,
                        "margin-top": "-1px"
                    })
                }
            }
            ,
            t.startStats = function(e) {
                this.multiplayer || this.started || (i.startGame([e.p1, e.p2]),
                o.startGame(),
                this.started = !0)
            }
            ,
            t.select = function(e) {  
                var t = "bottom-player" === e.player.id ? "#their-ships" : "#your-ships";
                   n = $(t + ' [data-cell="' + e.squareId + '"]');
                n.addClass("aim"); 
            }
            ,
            t.unselect = function(e) {
                var t = "bottom-player" === e.player.id ? "#their-ships" : "#your-ships";
                   n = $(t + ' [data-cell="' + e.squareId + '"]');
                n.removeClass("aim"); 
            }
            ,
            t.hit = function(o) {
                var s = this;
                o.player.stats.shots++,
                this.multiplayer && "bottom-player" === o.player.id && this.multiplayerClient.sendMove({
                    type: "shoot",
                    squareId: o.squareId
                });
                var e = $("#" + o.player.opponent.id + " .face-small");
                e.addClass("sad"),
                this.sadTimeout = setTimeout(function() {
                    return e.removeClass("sad")
                }, 1e3),
                c.debug("Player " + o.player.name + " shoots at " + o.squareId + " and hits. Ship sunk: " + !!o.sunkShip),
                d.shoot(!0),
                this.startStats(o.game),
                setTimeout(function() {
                    return d.hit()
                }, 350);
                var l = "bottom-player" === o.player.id ? "#their-ships" : "#your-ships";
                   t = $(l + ' [data-cell="' + o.squareId + '"]');
                t.addClass("hit-animate"),
                setTimeout(function() {
                    return t.addClass("hit")
                }, 300),
                "bottom-player" === o.player.id ? o.sunkShip ? this.message("You shoot at " + o.squareId + " and sink " + o.player.opponent.name + "'s ship! Your turn again!") : this.message("You shoot at " + o.squareId + " and hit! You may shoot again!") : o.sunkShip ? this.message(o.player.name + " shoots at " + o.squareId + " and sinks your ship!") : this.message(o.player.name + " shoots at " + o.squareId + " and hits your ship!");
                var u = 0;
                o.sunkShip ? setTimeout(function() {
                    "bottom-player" === o.player.id && s.createShipDiv("#their-ships .row-container", o.sunkShip),
                    $(l + ' [data-cell-id="' + o.sunkShip[0].id + '"]').addClass("sunk");
                    var e = o.sunkShip
                      , t = Array.isArray(e)
                      , n = 0;
                    for (e = t ? e : e[Symbol.iterator](); ; ) {
                        var a;
                        if (t) {
                            if (n >= e.length)
                                break;
                            a = e[n++]
                        } else {
                            if ((n = e.next()).done)
                                break;
                            a = n.value
                        }
                        $(l + ' [data-cell="' + a.id + '"]').addClass("sunk")
                    }
                    function i(e) {
                        var t = o.player.opponentSquares[e]
                          , n = l + ' [data-cell="' + e + '"]';
                        "ship-adjacent" !== t.state || $(n).hasClass("ship-adjacent") || setTimeout(function() {
                            return $(n).addClass("ship-adjacent")
                        }, 100 * ++u)
                    }
                    for (var r in o.player.opponentSquares)
                        i(r);
                    setTimeout(o.callback, 100 * u)
                }, 850) : setTimeout(o.callback, 400)
            }
            ,
            t.miss = function(e) {
                e.player.stats.shots++,
                this.multiplayer && "bottom-player" === e.player.id && this.multiplayerClient.sendMove({
                    type: "shoot",
                    squareId: e.squareId
                }),
                d.shoot(!0),
                this.startStats(e.game);
                var t = "bottom-player" === e.player.id ? "#their-ships" : "#your-ships";
                   n = $(t + ' [data-cell="' + e.squareId + '"]');
                  console.log("shot here" + e.squareID);
                c.debug("Player " + e.player.name + " shoots at " + e.squareId + " and misses."),
                "bottom-player" === e.player.id ? this.message("You shoot at " + e.squareId + " and miss. " + e.player.opponent.name + "'s turn!") : this.message(e.player.name + " shoots at " + e.squareId + " and misses. Your turn!"),
                n.addClass("miss-animate"),
                setTimeout(function() {
                    return n.addClass("miss")
                }, 300),
                setTimeout(e.callback, 100)
            }
            ,
            t.showEnemyShips = function(e) {
                var r = this;
                if (!(0 < $(".setup").length)) {
                    var t = function() {
                        if (a) {
                            if (o >= n.length)
                                return "break";
                            s = n[o++]
                        } else {
                            if ((o = n.next()).done)
                                return "break";
                            s = o.value
                        }
                        var i = s;
                        "ship-sunk" !== e.opponent.opponentSquares[i[0].id].state && setTimeout(function() {
                            r.createShipDiv("#their-ships .row-container", i, "reveal");
                            var e = i
                              , t = Array.isArray(e)
                              , n = 0;
                            for (e = t ? e : e[Symbol.iterator](); ; ) {
                                var a;
                                if (t) {
                                    if (n >= e.length)
                                        break;
                                    a = e[n++]
                                } else {
                                    if ((n = e.next()).done)
                                        break;
                                    a = n.value
                                }
                                $('#their-ships [data-cell="' + a.id + '"]').addClass("ship-square")
                            }
                        }, 2e3)
                    }
                      , n = e.ships
                      , a = Array.isArray(n)
                      , o = 0;
                    for (n = a ? n : n[Symbol.iterator](); ; ) {
                        var s;
                        if ("break" === t())
                            break
                    }
                }
            }
            ,
            t.rotateShip = function(e) {
                this.replaceShip(e)
            }
            ,
            t.replaceShip = function(e) {
                $('.ship[data-cell-id="' + e.oldShip[0].id + '"]').remove();
                var t = e.oldShip
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    $('#your-ships [data-cell="' + i.id + '"]').removeClass("ship-square")
                }
                var r = e.newShip
                  , o = Array.isArray(r)
                  , s = 0;
                for (r = o ? r : r[Symbol.iterator](); ; ) {
                    var l;
                    if (o) {
                        if (s >= r.length)
                            break;
                        l = r[s++]
                    } else {
                        if ((s = r.next()).done)
                            break;
                        l = s.value
                    }
                    $('#your-ships [data-cell="' + l.id + '"]').addClass("ship-square")
                }
                if (this.createShipDiv("#your-ships .row-container", e.newShip),
                !this.multiplayer) {
                    var u = []
                      , c = e.player.ships
                      , d = Array.isArray(c)
                      , h = 0;
                    for (c = d ? c : c[Symbol.iterator](); ; ) {
                        var f;
                        if (d) {
                            if (h >= c.length)
                                break;
                            f = c[h++]
                        } else {
                            if ((h = c.next()).done)
                                break;
                            f = h.value
                        }
                        var p = f;
                        u.push(p.map(function(e) {
                            return e.id
                        }))
                    }
                    this.storage.set("lastShips", m(u))
                }
            }
            ,
            t.cantRotateShip = function(e) {
                $('#your-ships [data-cell-id="' + e.ship[0].id + '"]').addClass("cant-rotate"),
                setTimeout(function() {
                    return $(".cant-rotate").removeClass("cant-rotate")
                }, 250)
            }
            ,
            t.moveShip = function(e) {
                this.replaceShip(e)
            }
            ,
            t.win = function(e) {
                $(".winner-img").hide(),
                $("#ready-to-start, #randomize, #concede").fadeOut();
                var t = e.winner.opponent;
                e.winner || e.winner.opponent || r.trackEvent("Error", "No Winner/opponent: winner: " + e.winner + ", wintype: " + e.winType),
                $("#" + t.id + " .face-small").addClass("sad"),
                clearTimeout(this.sadTimeout),
                this.multiplayer || (r.trackEvent("Win", e.winner.id, e.winner.stats.shots),
                r.trackEvent("FinishGame")),
                $("#" + e.winner.id + "-win").removeClass().addClass("winner-img face-large face-" + e.winner.id);
                var n = "bottom-player" === e.winner.id ? players.bottom.code : players.top.code
                  , a = n.match(/^\d+$/) ? n : n.charAt(2);
                $("#" + e.winner.id + "-win").addClass("hair-" + a),
                $("#" + e.winner.id + "-win").css("display", "inline-block"),
                $("#win-description").text(""),
                "timeout" === e.winType && this.multiplayer && this.multiplayerClient.sendMove({
                    type: "forcequit",
                    reason: "timeout",
                    playerId: t.multiplayerId
                }),
                "bottom-player" === e.winner.id ? (setTimeout(function() {
                    return d.win(!0)
                }, 1500),
                $("#result-box h3").text("You win the game!"),
                e.winType.match(/timeout/) ? $("#win-description").text(t.name + " timed out!") : e.winType.match(/concede|illegalmove/) ? $("#win-description").text(t.name + " surrendered!") : "abandon" === e.winType && $("#win-description").text(t.name + " disconnected from the game!"),
                "finishGame" !== e.winType && this.showEnemyShips(t),
                this.message("You win the game!!!")) : (setTimeout(function() {
                    return d.lose(!0)
                }, 1500),
                $("#result-box h3").text(e.winner.name + " wins the game!"),
                e.winType.match(/timeout/) ? $("#win-description").text("You timed out!") : e.winType.match(/concede|illegalmove/) && $("#win-description").text("You surrendered!"),
                this.message(e.winner.name + " wins the game!"),
                this.showEnemyShips(e.winner)),
                setTimeout(function() {
                    return $("body").addClass("show-results")
                }, 1e3),
                c.debug("Player " + e.winner.name + " wins the game!"),
                e.winner.stats.result = "win",
                e.winner.stats.minimumShotsToWin = e.winner.stats.shots,
                e.winner.stats.maximumShotsToWin = e.winner.stats.shots,
                e.winner.opponent.stats.result = "lose",
                delete e.winner.opponent.stats.shots,
                o.finishGame(),
                this.multiplayer ? (this.multiplayerClient.sendResult({
                    finished: !0,
                    winners: [e.winner.multiplayerId],
                    endReason: e.winType
                }),
                i.finishMultiplayerChallengeGame([e.game.p1, e.game.p2])) : i.finishGame([e.game.p1, e.game.p2])
            }
            ,
            e
        }();
        t.exports = s
    }
    , {
        "../shared/game": 11,
        "../shared/gamecontrol": 12,
        "../shared/helper-functions": 13,
        "../shared/statistics": 21,
        "../shared/temp-storage": 22,
        "../shared/util": 23,
        "./seabattle-encrypt": 3,
        "./seabattle-sounds": 6
    }],
    8: [function(e, t, n) {
        "use strict";
        function a() {}
        var i = e("../shared/helper-functions")
          , p = i.ArrayUtils
          , o = i.captainsLog
          , m = "unknown"
          , S = "ship"
          , s = "ship-hit"
          , u = "ship-sunk"
          , l = "shot-miss"
          , $ = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
        function C(e, t) {
            return Math.abs(e.col - t.col) <= 1 && Math.abs(e.row - t.row) <= 1
        }
        function w(e, t) {
            var n = e
              , a = Array.isArray(n)
              , i = 0;
            for (n = a ? n : n[Symbol.iterator](); ; ) {
                var r;
                if (a) {
                    if (i >= n.length)
                        break;
                    r = n[i++]
                } else {
                    if ((i = n.next()).done)
                        break;
                    r = i.value
                }
                var o = r
                  , s = t
                  , l = Array.isArray(s)
                  , u = 0;
                for (s = l ? s : s[Symbol.iterator](); ; ) {
                    var c;
                    if (l) {
                        if (u >= s.length)
                            break;
                        c = s[u++]
                    } else {
                        if ((u = s.next()).done)
                            break;
                        c = u.value
                    }
                    if (C(o, c))
                        return !0
                }
            }
            return !1
        }
        var r = function() {
            function e(e) {
                this.renderer = e
            }
            var t = e.prototype;
            return t.start = function(e, t, n) {
                var a = this;
                this.stateCounter = {},
                this.p1 = e,
                this.p2 = t,
                this.p1.score = 0,
                this.p1.opponent = t,
                this.p2.opponent = e,
                this.currentPlayer = n || this.p1,
                delete this.win;
                for (var i = 0, r = [this.p1, this.p2]; i < r.length; i++) {
                    var o = r[i];
                    o.state = "starting",
                    o.squares = this.createSquares(),
                    o.shipPlacements ? o.ships = this.placePreDefinedShips(o.shipPlacements, o.squares) : o.ships = this.placeRandomShips(o.squares),
                    o.opponentSquares = this.createSquares()
                }
                this.renderer.start({
                    starter: this.currentPlayer,
                    p1: this.p1,
                    p2: this.p2,
                    callback: function() {
                        return a.playerInit()
                    }
                })
            }
            ,
            t.createSquares = function() {
                for (var e = {}, t = 1; t <= 10; t++)
                    for (var n = 1; n <= 10; n++) {
                        var a = "ABCDEFGHIJ".charAt(t - 1) + n;
                        e[a] = {
                            row: n,
                            col: t,
                            id: a,
                            state: m,
                            toString: function() {
                                return this.id
                            }
                        }
                    }
                return e
            }
            ,
            t.resetSquares = function(e) {
                for (var t in e.squares)
                    e.squares[t].state = "UNKNOWN"
            }
            ,
            t.randomizeShips = function(e) {
                this.resetSquares(e),
                e.ships = this.placeRandomShips(e.squares),
                this.renderer.randomizeShips({
                    player: e,
                    callback: a
                })
            }
            ,
            t.areShipsIllegallyTouching = function(e) {
                for (var t = 0; t < e.length; t++)
                    for (var n = t + 1; n < e.length; n++) {
                        if (w(e[t], e[n]))
                            return !0
                    }
                return !1
            }
            ,
            t.placeRandomShips = function(e) {
                var t, i = Object.values(e), n = [], a = $, r = Array.isArray(a), o = 0;
                for (a = r ? a : a[Symbol.iterator](); ; ) {
                    var s;
                    if (r) {
                        if (o >= a.length)
                            break;
                        s = a[o++]
                    } else {
                        if ((o = a.next()).done)
                            break;
                        s = o.value
                    }
                    for (var l = s, u = 0, c = void 0; !c; ) {
                       t=i;
                        var d = t[Math.floor(Math.random() * t.length)];
                        if (1e3 < ++u)
                            throw new Error("Failed to find placement for ship of size " + l);
                        c = [d];
                        for (var h = Math.random() < .5, f = h ? 1 : 0, p = h ? 0 : 1, m = function(e) {
                            var t = d.col + p * e
                              , n = d.row + f * e
                              , a = i.find(function(e) {
                                return e.col === t && e.row === n
                            });
                            if (!a)
                                return c = null,
                                "break";
                            c.push(a)
                        }, g = 1; g < l; g++) {
                            if ("break" === m(g))
                                break
                        }
                    }
                    var y = function() {
                        if (b) {
                            if (w >= v.length)
                                return "break";
                            k = v[w++]
                        } else {
                            if ((w = v.next()).done)
                                return "break";
                            k = w.value
                        }
                        var t = k;
                        t.state = S,
                        i = i.filter(function(e) {
                            return !C(e, t)
                        })
                    }
                      , v = c
                      , b = Array.isArray(v)
                      , w = 0;
                    for (v = b ? v : v[Symbol.iterator](); ; ) {
                        var k;
                        if ("break" === y())
                            break
                    }
                    n.push(c)
                }
                return n
            }
            ,
            t.placePreDefinedShips = function(e, t) {
                var n = []
                  , a = e
                  , i = Array.isArray(a)
                  , r = 0;
                for (a = i ? a : a[Symbol.iterator](); ; ) {
                    var o;
                    if (i) {
                        if (r >= a.length)
                            break;
                        o = a[r++]
                    } else {
                        if ((r = a.next()).done)
                            break;
                        o = r.value
                    }
                    var s = []
                      , l = o
                      , u = Array.isArray(l)
                      , c = 0;
                    for (l = u ? l : l[Symbol.iterator](); ; ) {
                        var d;
                        if (u) {
                            if (c >= l.length)
                                break;
                            d = l[c++]
                        } else {
                            if ((c = l.next()).done)
                                break;
                            d = c.value
                        }
                        var h = d;
                        s.push(t[h])
                    }
                    n.push(s)
                }
                return n
            }
            ,
            t.playerInit = function() {
                this.p1.init(this),
                this.p2.init(this)
            }
            ,
            t.placeShips = function(e, t) {
                var n = this;
                e.state = "ready",
                this.resetSquares(e);
                var a = e.ships = t
                  , i = Array.isArray(a)
                  , r = 0;
                for (a = i ? a : a[Symbol.iterator](); ; ) {
                    var o;
                    if (i) {
                        if (r >= a.length)
                            break;
                        o = a[r++]
                    } else {
                        if ((r = a.next()).done)
                            break;
                        o = r.value
                    }
                    for (var s = o, l = 0; l < s.length; l++)
                        e.squares[s[l].id].state = S
                }
                e.opponent.opponentReady(),
                this.renderer.playerReady({
                    player: e,
                    callback: function() {
                        return n.afterPlayerReady()
                    }
                })
            }
            ,
            t.afterPlayerReady = function() {
                "ready" === this.p1.state && "ready" === this.p2.state && (this.p1.state = "started",
                this.p2.state = "started",
                this.currentPlayer.isHuman ? this.message("The game is starting, your turn!") : this.message("The game is starting, " + this.currentPlayer.name + " goes first!"),
                this.playerPlay())
            }
            ,
            t.nextPlayerPlay = function() {
                this.currentPlayer = this.currentPlayer.opponent,
                this.playerPlay()
            }
            ,
            t.playerPlay = function() {
                var e = $.reduce(function(e, t) {
                    return e + t
                }, 0);
                Object.values(this.currentPlayer.opponentSquares).filter(function(e) {
                    return e.state === u
                }).length === e || "undefined" != typeof forceWin ? (this.win = !0,
                this.renderer.win({
                    game: this,
                    winner: this.currentPlayer,
                    winType: "finishGame",
                    callback: a
                })) : this.currentPlayer.play()
            }
            ,
            t.generateAllVerticalShipsOfLength = function(e) {
                for (var t = [], n = 1; n <= 10; n++)
                    for (var a = 1; a <= 10 - e + 1; a++) {
                        for (var i = [], r = 0; r < e; r++)
                            i.push(" ABCDEFGHIJ".charAt(n) + (a + r));
                        t.push(i)
                    }
                return t
            }
            ,
            t.generateAllHorizontalShipsOfLength = function(e) {
                for (var t = [], n = 1; n <= 10; n++)
                    for (var a = 1; a <= 10 - e + 1; a++) {
                        for (var i = [], r = 0; r < e; r++)
                            i.push(" ABCDEFGHIJ".charAt(a + r) + n);
                        t.push(i)
                    }
                return t
            }
            ,
            t.getPossibleRotationCandidates = function(e, n, t) {
                t = t.filter(function(e) {
                    return e.some(function(t) {
                        return n.find(function(e) {
                            return e.id === t
                        })
                    })
                });
                var a = e.ships.filter(function(e) {
                    return e[0].id !== n[0].id
                })
                  , i = []
                  , r = t
                  , o = Array.isArray(r)
                  , s = 0;
                for (r = o ? r : r[Symbol.iterator](); ; ) {
                    var l;
                    if (o) {
                        if (s >= r.length)
                            break;
                        l = r[s++]
                    } else {
                        if ((s = r.next()).done)
                            break;
                        l = s.value
                    }
                    var u = []
                      , c = l
                      , d = Array.isArray(c)
                      , h = 0;
                    for (c = d ? c : c[Symbol.iterator](); ; ) {
                        var f;
                        if (d) {
                            if (h >= c.length)
                                break;
                            f = c[h++]
                        } else {
                            if ((h = c.next()).done)
                                break;
                            f = h.value
                        }
                        var p = f;
                        u.push(e.squares[p])
                    }
                    i.push(u)
                }
                function m(t) {
                    return !a.some(function(e) {
                        return w(t, e)
                    })
                }
                for (var g = [], y = 0, v = i; y < v.length; y++) {
                    var b = v[y];
                    m(b) && g.push(b)
                }
                return g
            }
            ,
            t.rotateShip = function(e, t, n) {
                if (1 === t.length)
                    return !1;
                var a;
                if (0 === (a = (a = t[0].row === t[1].row ? this.generateAllVerticalShipsOfLength(t.length) : this.generateAllHorizontalShipsOfLength(t.length),
                this.getPossibleRotationCandidates(e, t, a))).length)
                    this.renderer.cantRotateShip({
                        player: e,
                        ship: t
                    });
                else {
                    var i = t
                      , r = this.getBestRotationCandidate(a, i, n);
                    p.remove(e.ships, i),
                    e.ships.push(r);
                    var o = i
                      , s = Array.isArray(o)
                      , l = 0;
                    for (o = s ? o : o[Symbol.iterator](); ; ) {
                        var u;
                        if (s) {
                            if (l >= o.length)
                                break;
                            u = o[l++]
                        } else {
                            if ((l = o.next()).done)
                                break;
                            u = l.value
                        }
                        u.state = m
                    }
                    var c = r
                      , d = Array.isArray(c)
                      , h = 0;
                    for (c = d ? c : c[Symbol.iterator](); ; ) {
                        var f;
                        if (d) {
                            if (h >= c.length)
                                break;
                            f = c[h++]
                        } else {
                            if ((h = c.next()).done)
                                break;
                            f = h.value
                        }
                        f.state = S
                    }
                    this.renderer.rotateShip({
                        player: e,
                        oldShip: i,
                        newShip: r
                    })
                }
            }
            ,
            t.moveShip = function(e, t, n) {
                if (!this.canPlaceShipAtSquare(e, t, n))
                    throw new Error("Can't place ship " + t + " at square " + n);
                var a = this.createMovedShip(e, t, n)
                  , i = t;
                p.remove(e.ships, i),
                e.ships.push(a),
                this.renderer.moveShip({
                    player: e,
                    oldShip: i,
                    newShip: a
                })
            }
            ,
            t.createMovedShip = function(e, i, t) {
                for (var r = [e.squares[t]], o = Object.values(e.squares), n = function(t) {
                    var n = i[t].row - i[t - 1].row
                      , a = i[t].col - i[t - 1].col
                      , e = o.find(function(e) {
                        return e.col === r[t - 1].col + a && e.row === r[t - 1].row + n
                    });
                    r.push(e)
                }, a = 1; a < i.length; a++)
                    n(a);
                return r
            }
            ,
            t.canPlaceShipAtSquare = function(e, t, n) {
                var a = this.createMovedShip(e, t, n)
                  , i = e.ships
                  , r = Array.isArray(i)
                  , o = 0;
                for (i = r ? i : i[Symbol.iterator](); ; ) {
                    var s;
                    if (r) {
                        if (o >= i.length)
                            break;
                        s = i[o++]
                    } else {
                        if ((o = i.next()).done)
                            break;
                        s = o.value
                    }
                    var l = s;
                    if (l[0].id !== t[0].id && w(l, a))
                        return !1
                }
                return !0
            }
            ,
            t.getBestRotationCandidate = function(e, t, n) {
                if (3 === t.length) {
                    var a = e.find(function(e) {
                        return e[1].id === t[1].id
                    });
                    if (a)
                        return o.debug("Found center rotation for 3 length"),
                        a
                } else if (4 === t.length) {
                    var i = e.find(function(e) {
                        return e[1].id === t[1].id || e[2].id === t[2].id || e[1].id === t[2].id || e[2].id === t[1].id
                    });
                    if (i)
                        return o.debug("Found center rotation for 4 length"),
                        i
                }
                var r = e.find(function(e) {
                    return e.find(function(e) {
                        return e.id === n
                    })
                });
                return r ? (o.debug("Found rotation that contains the rotation square"),
                r) : e[0]
            }
            ,
            t.markSunkShip = function(e, t) {
                var n = e
                  , a = Array.isArray(n)
                  , i = 0;
                for (n = a ? n : n[Symbol.iterator](); ; ) {
                    var r;
                    if (a) {
                        if (i >= n.length)
                            break;
                        r = n[i++]
                    } else {
                        if ((i = n.next()).done)
                            break;
                        r = i.value
                    }
                    var o = r;
                    for (var s in t[o.id].state = u,
                    t) {
                        var l = t[s];
                        l.state === m && C(l, o) && (l.state = "ship-adjacent")
                    }
                }
            }
            ,
            t.selsquare = function(e, t){
                this.renderer.select({
                    game: this,
                    player: e,
                    squareId: t
                });
            }
            ,
            t.deselsquare = function(e, t){
                this.renderer.unselect({
                    game: this,
                    player: e,
                    squareId: t
                });
            }
            ,
            t.shoot = function(e, t) {
                var n = this;
                if (!this.win) {
                    var a = e.opponent
                      , i = a.squares[t];
                    if (i.state === S) {
                        i.state = s,
                        e.opponentSquares[t].state = s;
                        var r, o = a.ships.find(function(e) {
                            return e.find(function(e) {
                                return e.id === t
                            })
                        });
                        o.every(function(e) {
                            return e.state === s
                        }) && (r = o.slice(),
                        this.markSunkShip(r, e.opponentSquares),
                        this.markSunkShip(r, a.squares)),
                        this.renderer.hit({
                            game: this,
                            player: e,
                            squareId: t,
                            sunkShip: r,
                            callback: function() {
                                return n.playerPlay()
                            }
                        })
                    } else
                        i.state = l,
                        e.opponentSquares[t].state = l,
                        this.renderer.miss({
                            game: this,
                            player: e,
                            squareId: t,
                            callback: function() {
                                return n.nextPlayerPlay()
                            }
                        })
                }
            }
            ,
            t.forceQuit = function(e, t) {
                this.hasForceQuit || (this.win = !0,
                this.hasForceQuit = !0,
                this.renderer.win({
                    winner: e.opponent,
                    loser: e,
                    winType: t,
                    game: this,
                    callback: function() {}
                }))
            }
            ,
            t.message = function(e) {
                this.renderer.message({
                    msg: e,
                    callback: a
                })
            }
            ,
            e
        }();
        t.exports = r
    }
    , {
        "../shared/helper-functions": 13
    }],
    9: [function(e, t, n) {
        "use strict";
        var r = e("./helper-functions").captainsLog
          , s = function(t, e, n, a, i) {
            "undefined" != typeof APP_MODE && APP_MODE && (t = "https://cardgames.io" + t),
            n = n || function() {
                r.debug("Successfully posted to this url: " + t + " with this data : " + JSON.stringify(e))
            }
            ,
            a = a || function(e) {
                console.log("ERROR for urL " + t),
                r.error("ERROR: " + JSON.stringify(e))
            }
            ,
            $.ajax({
                type: "POST",
                url: t,
                headers: i || {},
                data: JSON.stringify(e),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: n,
                error: a
            })
        }
          , o = function(e, t, n) {
            if ("undefined" != typeof APP_MODE && APP_MODE && (e = "https://cardgames.io" + e),
            !t)
                throw new TypeError("Success handler missing");
            return n = n || function(e) {
                r.error(JSON.stringify(e))
            }
            ,
            $.ajax({
                type: "GET",
                url: e,
                success: t,
                error: n
            })
        }
          , a = {
            avatars: {
                getStats: function(e, t) {
                    return o("/api/avatars/", e, t)
                },
                getLatest: function(e, t) {
                    return o("/api/avatars/latest", e, t)
                },
                saveFace: function(e, t, n) {
                    var a = {
                        code: e,
                        userAgent: navigator.userAgent
                    };
                    s("/api/avatars/", a, t, n)
                }
            },
            adfree: {
                getCode: function(e, t, n) {
                    return o("/api/adfree/" + e, t, n)
                },
                activateCode: function(e, t, n) {
                    return s("/api/adfree/" + e + "/activate", {
                        code: e
                    }, t, n)
                }
            },
            gdpr: {
                accept: function(e, t, n, a) {
                    return s("/api/gdpr/accept", {
                        allowPersonalizedAds: e,
                        userAgent: t
                    }, n, a)
                }
            },
            country: {
                get: function(e, t) {
                    return o("/lambda/country/", e, t)
                }
            },
            errors: {
                getLatest: function(e, t) {
                    return o("/api/errors/latest", e, t)
                },
                getByName: function(e, t, n) {
                    return o("/api/errors/" + e, t, n)
                },
                log: function(e, t, n, a, i, r) {
                    void 0 === r && (r = 0);
                    var o = {
                        name: e,
                        slug: t,
                        errorMessage: n,
                        url: location.href,
                        userAgent: navigator.userAgent,
                        maxMailCount: r
                    };
                    s("/api/errors", o, a, i)
                }
            },
            badDomain: function() {
                $.ajax({
                    url: "https://cardgames.io/api/errors/baddomain/?domain=" + location.hostname + "&href=" + encodeURIComponent("https://cardgames.io/seabattle/"),
                    dataType: "jsonp",
                    jsonpCallback: "nothing"
                })
            },
            events: {
                post: function(e, t, n) {
                    s("https://cardgames.io/api/events/", e, t, n)
                }
            },
            numberedGames: {
                win: function(e, t, n, a, i) {
                    return n = n.replace(/ /g, "-"),
                    s("/api/" + t + "/" + n + "/numberedgames/" + e + "/win", a, i)
                },
                postSaveResult: function(e, t, n, a, i, r) {
                    return a = a.replace(/ /g, "-"),
                    s("/api/" + n + "/" + a + "/numberedgames/" + t + "/saveresult", e, i, r)
                },
                start: function(e, t, n, a, i) {
                    return n = n.replace(/ /g, "-"),
                    s("/api/" + t + "/" + n + "/numberedgames/" + e + "/start", a, i)
                },
                getGame: function(e, t, n, a, i) {
                    return n = n.replace(/ /g, "-"),
                    o("/api/" + t + "/" + n + "/numberedgames/" + e + "/?domain=" + encodeURIComponent("https://cardgames.io/seabattle/"), a, i)
                },
                getStats: function(e, t, n, a) {
                    return t = t.replace(/ /g, "-"),
                    o("/api/" + e + "/" + t + "//numberedgames/stats", n, a)
                }
            },
            visitors: {
                post: function(e, t, n) {
                    return s("/api/visitors", e, t, n)
                }
            },
            badWords: {
                get: function(e, t) {
                    return o("/api/badwords", e, t)
                }
            }
        };
        t.exports = a
    }
    , {
        "./helper-functions": 13
    }],
    10: [function(e, t, n) {
        "use strict";
        var d = e("./util")
          , a = function() {
            function e(e, t, n) {
                if (void 0 === n && (n = !1),
                this.debug = n,
                this.buffers = {},
                this.audioElements = {},
                this.lastSource = null,
                this.isSoundOn = t || function() {
                    return !0
                }
                ,
                "undefined" != typeof AudioContext ? this.audioContext = new AudioContext : "undefined" != typeof webkitAudioContext ? this.audioContext = new webkitAudioContext : "undefined" != typeof Audio ? (this.log("AudioContext not available, using Audio tags instead..."),
                this.loadAudioElements(e)) : this.log("No audio available"),
                this.audioContext) {
                    if (!this.audioContext.resume) {
                        var a = this;
                        this.audioContext.resume = function() {
                            return a.log('Set Fake state to "running"'),
                            this.state = "running",
                            {
                                then: function(e) {
                                    return e()
                                }
                            }
                        }
                    }
                    document.location.search.match(/safaribug/) && (this.debug = !0,
                    AudioContext.prototype.decodeAudioData = function() {
                        return new Promise(function(e, t) {
                            setTimeout(function() {
                                t(new Error("FakeDecodingError"))
                            }, 20)
                        }
                        )
                    }
                    ),
                    this.loadBuffers(e),
                    this.setupUnlocking()
                }
            }
            var t = e.prototype;
            return t.setupUnlocking = function() {
                function a(e) {
                    if (i.log("Trying to unlock AudioContext on event " + e.type),
                    !o.resume) {
                        var t = [];
                        for (var n in o)
                            t.push(n);
                        return t.sort(),
                        void setTimeout(function() {
                            throw new Error("No resume available. User Agent: " + navigator.userAgent + ", available methods: " + t)
                        }, 200)
                    }
                    o.resume().then(function() {
                        "running" === o.state ? (i.log("AudioContext now unlocked"),
                        r.forEach(function(e) {
                            return document.body.removeEventListener(e, a, !0)
                        }),
                        i.listeningForUnlock = !1) : i.log("Failed to resume AudioContext, state is " + o.state)
                    })
                }
                var i = this
                  , r = ["touchstart", "touchend", "keydown", "mousedown"]
                  , o = this.audioContext;
                this.listeningForUnlock || (this.listeningForUnlock = !0,
                r.forEach(function(e) {
                    return document.body.addEventListener(e, a, !0)
                }))
            }
            ,
            t.log = function(e) {
                this.debug && console.log("AudioPlayer: " + e)
            }
            ,
            t.loadBuffers = function(e) {
                for (var t in e)
                    this.loadBuffer(t, e[t])
            }
            ,
            t.loadBuffer = function(n, a) {
                var i = this;
                try {
                    var r = new XMLHttpRequest;
                    if (r.name = n,
                    r.open("GET", a),
                    r.responseType = "arraybuffer",
                    r.addEventListener("load", function(e) {
                        i.log("Request status for " + n + ": " + r.status);
                        var t = e.target.response;
                        i.audioContext.decodeAudioData(t).then(function(e) {
                            i.log("Buffered sound: " + n),
                            i.buffers[n] = e
                        }).catch(function(e) {
                            i.log("Error decoding audio data for " + n + ": " + e),
                            location.search.match(/element/) ? (i.log("Falling back to audio elements..."),
                            i.audioElements[n] = new Audio(a),
                            i[n] = function() {
                                return i.tryPlayAudioElement(n)
                            }
                            ) : i.decodeBufferManually(t, n)
                        })
                    }, !1),
                    r.send(),
                    this[n])
                        throw new Error("Sound name '" + n + "' conflicts with built in method in AudioPlayer");
                    this[n] = function(e) {
                        return i.tryPlay(n, e)
                    }
                } catch (e) {
                    this.log("Error loading buffer " + n + ": " + e)
                }
            }
            ,
            t.decodeBufferManually = function(e, a) {
                var i = this
                  , r = (new Date).getTime()
                  , o = new Worker("/shared/workers/" + siteVersion + "/mp3-worker.min.js");
                this.fallbackDecoding = !0,
                o.onmessage = function(e) {
                    i.log('Got message from worker, sound "' + e.data.name + '" is decoded into PCM');
                    var t = i.convertPcmArrayToAudioBuffer(e.data.pcmArrayBuffer, e.data.sampleRate, e.data.numberOfChannels)
                      , n = (new Date).getTime() - r;
                    i.buffers[a] = t,
                    i.log("Finished decoding " + a + " in " + n + "ms"),
                    o.terminate()
                }
                ,
                this.log("About to decode " + a + " with the fallback MP3 lib"),
                o.postMessage({
                    arrayBuffer: e,
                    name: a
                }, [e])
            }
            ,
            t.convertPcmArrayToAudioBuffer = function(e, t, n) {
                var a = "";
                try {
                    var i = new DataView(e)
                      , r = new AudioBuffer({
                        length: e.byteLength / 2 / n,
                        numberOfChannels: n,
                        sampleRate: t
                    });
                    a += "Created AudioBuffer object";
                    for (var o = [], s = 0; s < n; s += 1)
                        o.push(r.getChannelData(s));
                    a += ", got channelData from buffer";
                    for (var l = 0; l < i.byteLength; l += 2) {
                        var u = l / 2 % n
                          , c = i.getInt16(l, !0);
                        o[u][Math.floor(l / 2 / n)] = c < 0 ? c / 32768 : c / 32767
                    }
                    return a += " Set data in buffer",
                    r
                } catch (e) {
                    return d.forceTrackEvent("AudioManualDecodeError", navigator.userAgent + "\n" + a + "\n" + e.toString()),
                    null
                }
            }
            ,
            t.loadAudioElements = function(t) {
                function e(e) {
                    if (n.audioElements[e] = new Audio(t[e]),
                    n[e])
                        throw new Error("Sound name '" + e + "' conflicts with built in method in AudioPlayer");
                    n[e] = function() {
                        return n.tryPlayAudioElement(e)
                    }
                }
                var n = this;
                for (var a in t)
                    e(a)
            }
            ,
            t.tryPlay = function(t, n) {
                var a = this;
                if (this.isSoundOn())
                    if (this.audioContext && this.buffers[t]) {
                        var e = function() {
                            try {
                                a.log("Playing " + t);
                                var e = a.audioContext.createBufferSource();
                                if (e.buffer = a.buffers[t],
                                e.connect(a.audioContext.destination),
                                a.lastSource && !a.lastSource.finished && !n)
                                    try {
                                        a.lastSource.stop()
                                    } catch (e) {
                                        a.log("Audio buffer for sound " + t + " failed to stop: " + e)
                                    }
                                e.onended = function() {
                                    return e.finished = !0
                                }
                                ,
                                e.start(0),
                                a.fallbackDecoding && !a.loggedAudio && (a.loggedAudio = !0,
                                d.forceTrackEvent("SuccessPlayFallback", navigator.userAgent)),
                                a.lastSource = e
                            } catch (e) {
                                a.log("Audio buffer for sound " + t + " failed to play: " + e),
                                a.fallbackDecoding && d.forceTrackEvent("FailedSoundFallback", navigator.userAgent + ": " + e)
                            }
                        };
                        "interrupted" === this.audioContext.state ? (this.log('State is "interrupted", resuming context before playing'),
                        this.audioContext.resume().then(e)) : e(),
                        "suspended" === this.audioContext.state && this.setupUnlocking()
                    } else
                        this.log("Can't play sound " + t + ", either there is no AudioContext or it's not buffered yet.");
                else
                    this.log("Sound is off, not playing " + t)
            }
            ,
            t.tryPlayAudioElement = function(t) {
                if (this.isSoundOn())
                    if (this.audioElements[t])
                        if (4 !== this.audioElements[t].readyState)
                            this.log("Audio element for sound " + t + " is not fully loaded");
                        else
                            try {
                                this.lastAudioElement && this.lastAudioElement.pause(),
                                this.audioElements[t].currentTime = 0,
                                this.audioElements[t].play(),
                                this.lastAudioElement = this.audioElements[t]
                            } catch (e) {
                                this.log("Audio element for sound " + t + " failed to play: " + e),
                                console.log(e)
                            }
                    else
                        this.log("Audio element for sound " + t + " doesn't exist");
                else
                    this.log("Sound is off, not playing " + t)
            }
            ,
            t.stop = function() {
                try {
                    this.lastAudioElement ? this.lastAudioElement.pause() : this.lastSource && !this.lastSource.finished && this.lastSource.stop()
                } catch (e) {
                    this.log("Failed to stop audio: " + e)
                }
            }
            ,
            e
        }();
        t.exports = a
    }
    , {
        "./util": 23
    }],
    11: [function(e, t, n) {
        "use strict";
        var a, l = e("./util"), i = e("./helper-functions"), s = i.captainsLog, u = i._setTimeout, r = i._setInterval, c = (i.ArrayUtils,
        l.settings), d = e("./gamecontrol"), h = e("./temp-storage"), o = {
            h: "&hearts;",
            s: "&spades;",
            d: "&diams;",
            c: "&clubs;"
        };
        function f() {
            a && (window.requestAnimationFrame(f),
            $.fx.tick())
        }
        window.requestAnimationFrame && (l.qs.gid ? s.debug("Multiplayer game, not using requestAnimationFrame") : ($.fx.timer = function(e) {
            e() && jQuery.timers.push(e) && !a && (a = !0,
            f())
        }
        ,
        $.fx.stop = function() {
            a = !1
        }
        ));
        var p = navigator.userAgent.match(/Android (4|5|6|7|8|9)/) && navigator.userAgent.match(/ SM-|samsung/g);
        l.qs.android && (p = !0),
        p && (o = {
            h: "&#x2661;",
            s: "&#x2664;",
            d: "&#x2662;",
            c: "&#x2667;"
        });
        var m, g = (m = 1,
        {
            get: function() {
                return m
            },
            set: function(e) {
                "string" == typeof e && (e = {
                    verySlow: .5,
                    slow: .8,
                    normal: 1,
                    fast: 1.5,
                    veryFast: 2.2
                }[e]),
                m = e,
                $.fx.speeds._default = y(400),
                $.fx.speeds.fast = y(200),
                $.fx.speeds.slow = y(600),
                1 != m && (v("animate", 1),
                v("fadeOut", 0),
                v("fadeIn", 0),
                u.speed = m,
                r.speed = m)
            },
            toString: function() {
                return "SPEED: " + m
            },
            ms: y
        });
        function y(e) {
            return e / m
        }
        function v(e, n) {
            var a = $.fn[e];
            $.fn[e] = function() {
                var e = Array.prototype.slice.call(arguments)
                  , t = e[n];
                return "number" == typeof t ? e[n] = y(t) : t && t.duration && (t.duration = y(t.duration)),
                a.apply(this, e)
            }
        }
        function b(e) {
            $("#" + e + " div").addClass("sad")
        }
        function w(e) {
            $("#" + e + " div").removeClass("sad")
        }
        c.speed && "normal" !== c.speed && g.set(c.speed),
        l.cake("scroll") && (window.scroll(0, parseInt(l.cake("scroll"))),
        l.deleteCake("scroll")),
        document.referrer && document.referrer.length && (document.referrer.match(/^https:\/\/cardgames\.io\//) || document.referrer.match(/127\.0\.0\.1/) || l.trackEvent("Referral", document.referrer));
        var k, S, C, A = (k = "",
        S = {},
        C = 0,
        $(document).on("keypress", function(e) {
            var t = (new Date).getTime();
            2e3 < t - C && (k = ""),
            C = t;
            var n = String.fromCharCode(e.which);
            for (var a in k += n,
            S) {
                if (a == k)
                    return S[a](),
                    void (k = "");
                if (a.substr(0, k.length) == k)
                    return
            }
            for (var i in S)
                if (i.substr(0, 1) == n)
                    return void (k = n);
            k = ""
        }),
        function(e, t) {
            S[e] = t
        }
        );
        function x(e) {
            void 0 === e && (e = "");
            var n = e.split(",")
              , t = s.messages.filter(function(t) {
                return n.some(function(e) {
                    return -1 !== t.toLowerCase().indexOf(e.trim().toLowerCase())
                })
            });
            0 === t.length ? $("#matrix textarea").val("Sorry, no log lines found for term: " + e) : $("#matrix textarea").val(t.join("\n"))
        }
        window.players && window.players.top && "2" === window.players.top.code && $("body").addClass("default-top-player"),
        A("matrix", function() {
            $("body").toggleClass("matrix");
            var e = $("#matrix textarea");
            $("body").hasClass("matrix") && (x(),
            e.scrollTop(e[0].scrollHeight),
            setTimeout(function() {
                $("#matrix input").val("").focus()
            }, 200))
        }),
        $("#matrix-log-filter").on("input", function(e) {
            var t = $("#matrix-log-filter").val().trim().toLowerCase()
              , n = $("#matrix textarea");
            t.match(/^(:q|quit|exit|matrix)$/) ? $("body").removeClass("matrix") : t.match(/fuck/) ? n.val("We're not that kind of site!") : "help" === t ? n.val("What do you need help with?") : "who are you" === t ? n.val("My name is Skynet.") : "skynet" === t ? n.val("Welcome to Cyberdyne systems.") : "shutdown" === t ? n.val("Shutting site down in 5 seconds...") : "cheat" === t ? n.val("Nice try!") : x(t.trim())
        }),
        l.qs.autoplay && ("number" == typeof l.qs.autoplay ? g.set(l.qs.autoplay) : g.set(3)),
        $(function() {
            for (var e = 0, t = ["bottom", "top", "left", "right"]; e < t.length; e++) {
                var n = t[e];
                l.preloadBackgroundImageClass("face-small sad face-" + n + "-player")
            }
            function i(e) {
                if (void 0 === c)
                    return {};
                var t = void 0 !== c[e] ? c : l.siteSettings;
                return void 0 === t[e] ? (s.error("Bad option name: " + e),
                {}) : t
            }
            $(document).on("keypress", function(e) {
                13 === e.which && $("#start-new-game").is(":visible") && $("#start-new-game").click()
            }),
            APP_MODE && (l.siteSettings.showAdSettingsLink && $("#ad-settings").css("display", "block"),
            window.app = {
                showAdSettingsLink: function() {
                    l.siteSettings.set("showAdSettingsLink", !0),
                    $("#ad-settings").css("display", "block")
                },
                hideAdSettingsLink: function() {
                    l.siteSettings.set("showAdSettingsLink", !1),
                    $("#ad-settings").hide()
                }
            },
            $(".game-links a").on("click", function(e) {
                var t = e.target.href;
                e.preventDefault(),
                l.ads.trigger(function() {
                    location.href = t
                })
            }),
            window.addEventListener("message", function(e) {
                if ("new-face" === e.data) {
                    loadPlayerFaces(),
                    $("#temphidenames").remove(),
                    $("body").removeClass("subview-open avatars-subview-open");
                    var t = $("#title h1").data("real-title");
                    t && $("#title h1").text(t)
                }
            }),
            window.addEventListener("orientationchange", function(e) {
                $("body").removeClass("subview-open avatars-subview-open  statistics-subview-open");
                var t = $("#title h1").data("real-title");
                t && $("#title h1").text(t)
            }),
            $('a[href$="/statistics/"]').on("click", function(e) {
                e.preventDefault(),
                $("#statistics-subview").attr("src") || $("#statistics-subview").attr("src", e.target.href),
                $("body").addClass("subview-open").addClass("statistics-subview-open"),
                l.mobileMenu.close()
            }),
            $('a[href$="/avatars/"]').on("click", function(e) {
                e.preventDefault();
                var t = $("#title h1")
                  , n = t.text();
                t.data("real-title", n),
                t.text("CHANGE PLAYER"),
                $("#avatars-subview").attr("src") || $("#avatars-subview").attr("src", "/avatars/"),
                $("body").addClass("subview-open").addClass("avatars-subview-open"),
                l.mobileMenu.close()
            }),
            $(".appmode-remove").remove(),
            $(".game-links a").each(function() {
                $(this).attr("href", $(this).attr("href") + "?" + (new Date).getTime())
            }),
            $('a[href="#ad-settings"]').on("click", function(e) {
                e.preventDefault(),
                l.mobileMenu.close(),
                window.Android ? Android.adSettings() : window.webkit.messageHandlers.adSettings.postMessage("Hi there")
            })),
            $("#play-page").on("click", function() {}),
            $('.option-row input[type="radio"]').each(function() {
                var e = $(this).attr("name");
                i(e)[e] == $(this).val() && $(this).prop("checked", !0)
            }),
            $(".option-row input+span").on("touchstart", function(e) {
                $(this).siblings("input").trigger("click"),
                e.preventDefault()
            }),
            $('.option-row input[type="radio"]').on("change", function(e) {
                var t = $(this).attr("name")
                  , n = i(t)
                  , a = $(this).val();
                "number" == typeof n[t] ? n.set(t, parseInt(a)) : n.set(t, a)
            }),
            $('.option-row input[type="checkbox"]').each(function() {
                var e = $(this).attr("name")
                  , t = i(e);
                $(this).prop("checked", t[e])
            }),
            $('.option-row input[type="checkbox"]').on("change", function(e) {
                var t = $(this).attr("name");
                i(t).set(t, $(this).is(":checked"))
            }),
            l.siteSettings.addListener("useDarkTheme", function(e) {
                e.value ? $("html").addClass("dark-theme") : $("html").removeClass("dark-theme")
            }),
            l.siteSettings.addListener("hideMultiplayerButton", function(e) {
                l.siteSettings.hideMultiplayerButton && ($("#multiplayer-button").hide(),
                APP_MODE || alert("You've chosen to hide the Multiplayer button. It will still show up when you load the page, but will be hidden as soon as the game starts."))
            }),
            l.siteSettings.addListener("holidayThemes", function(e) {
                e.value ? (themes.turnOn(),
                l.deleteCake("themeoff")) : themes.turnOff()
            }),
            l.siteSettings.addListener("alwaysUseInterstitialAds", function(e) {
                $(".don-draper").css("visibility", e.value ? "hidden" : "visible")
            }),
            l.siteSettings.addListener("spreadCards", function(e) {
                try {
                    webRenderer._adjustHand(human)
                } catch (e) {}
            }),
            void 0 !== c && c.addListener("speed", function(e) {
                $("#speed-value").text({
                    slow: "Slow",
                    verySlow: "Very slow",
                    normal: "Normal",
                    fast: "Fast",
                    veryFast: "Very fast"
                }[c.speed]),
                g.set(c.speed)
            }),
            $("#facebook-promo a").click(function() {
                l.trackEvent("FacebookLinkClick")
            }),
            u(function() {
                l.preloadImage(STATIC_ASSET_DOMAIN + "/shared/images/svg/trophy.svg")
            }, 9e3),
            $(".avatar").click(function() {
                l.trackEvent("ClickPlayer", $(this).attr("id"))
            }),
            $("#game-options-page button").click(function() {
                $("body").removeClass("options-open")
            }),
            $('a[href="#options"]').click(function(e) {
                e.preventDefault(),
                l.removeConfetti(),
                l.mobileMenu.isOpen() && l.mobileMenu.close(),
                $("body").addClass("options-open"),
                $("body").removeClass("multiplayer-open"),
                $.getJSON("/version.json", function(e) {
                    $("#options-version").text("v" + e.version)
                })
            });
            void 0 !== c && $("#speed-value").text({
                verySlow: "Very slow",
                slow: "Slow",
                normal: "Normal",
                fast: "Fast",
                veryFast: "Very fast"
            }[c.speed]),
            $('a[href="#newgame"]').click(function(e) {
                function t() {
                    l.qs.gid ? document.location.href = document.location.pathname : (l.isMobileLookActive(),
                    l.reloadPage())
                }
                e.preventDefault(),
                e.stopPropagation(),
                l.removeConfetti();
                var n, a, i = "You have a game in progress. Are you sure you want to start a new game and abandon the current game?";
                n = d.isGameStarted(),
                a = d.isGameFinished();
                var r = new h(window.slug);
                return n ? a ? l.cake("results") || r.get("scores") ? confirm(i) && (l.cake("results", ""),
                r.remove("scores"),
                l.trackEvent("NewGame", "Finished"),
                l.ads.trigger(t)) : (l.trackEvent("NewGame", "Finished"),
                l.ads.trigger(t)) : confirm(i) && (l.trackEvent("NewGame", "Abandoned"),
                l.cake("results") && l.cake("results", ""),
                r.remove("scores"),
                l.ads.trigger(t)) : l.cake("results") || r.get("scores") ? confirm(i) && (l.cake("results", ""),
                r.remove("scores"),
                l.trackEvent("NewGame", "NotStarted"),
                l.ads.trigger(t)) : (l.trackEvent("NewGame", "NotStarted"),
                l.ads.trigger(t)),
                !1
            });
            function a(e) {
                return e && e.toUpperCase().match(/-THX1138$/)
            }
            function r() {
                window.paused ? (window.paused = !1,
                window.pauseTime += (new Date).getTime() - window.pausedAt,
                $('a[href="#pause"]').text("Pause Game"),
                $("#play-page").removeClass("paused"),
                $("#pause-notification").hide()) : d.isGameFinished() || (window.pauseTime = window.pauseTime || 0,
                window.pausedAt = (new Date).getTime(),
                window.paused = !0,
                $('a[href="#pause"]').text("Resume Game"),
                $("#play-page").addClass("paused"),
                $("#pause-notification").show())
            }
            a(l.cake("betacode")) && $("#board").removeClass("beta"),
            $("#beta-screen button").on("click", function(e) {
                e.preventDefault();
                var t = $("#beta-screen input").val();
                a(t) ? ($("#board").removeClass("beta"),
                l.cake("betacode", t, 20)) : alert("That is not a valid code")
            }),
            $('a[href="#rules"],a[href="#about"]').on("click", function(e) {
                e.target.href.match(/#rules/) ? ($("body").removeClass("about-open"),
                $("body").addClass("rules-open")) : ($("body").removeClass("rules-open"),
                $("body").addClass("about-open")),
                APP_MODE && e.preventDefault(),
                l.mobileMenu.close()
            }),
            $('a[href="#pause"]').click(function(e) {
                r(),
                l.mobileMenu.close(),
                e.preventDefault()
            }),
            $("#resume-button").click(function(e) {
                r(),
                l.mobileMenu.close(),
                e.preventDefault()
            }),
            $(".theme-off").on("click", function(e) {
                e.preventDefault(),
                l.cake("themeoff", "1", 10, "/"),
                $("html").removeClass(themes.current)
            }),
            $(".theme-on").on("click", function(e) {
                e.preventDefault(),
                l.deleteCake("themeoff"),
                0 === $("#theme-css").length && $("<link>", {
                    href: "/themes/" + siteVersion + "/" + themes.current + ".min.css",
                    id: "theme-css",
                    rel: "stylesheet"
                }).appendTo("head"),
                $("html").addClass(themes.current)
            }),
            $(window).on("pagehide", function(e) {
                window.paused || (window.pageHiddenAt = (new Date).getTime())
            }),
            $(window).on("pageshow", function() {
                if (!window.paused && window.pageHiddenAt) {
                    var e = (new Date).getTime() - window.pageHiddenAt;
                    "undefined" == typeof pauseTime && (window.pauseTime = 0),
                    window.pauseTime += e
                }
            }),
            void 0 === document.createElement("div").style.webkitTextStroke && $("html").addClass("no-text-stroke"),
            window.startTime = (new Date).getTime(),
            (new Date).toString().match(/ May 4 /) && $("#the-force").text("May the 4th be with you");
            try {
                if (!l.isMobileLookActive()) {
                    var o = document.createElement("div");
                    o.innerHTML = "&nbsp;",
                    o.className = "adsbox",
                    document.body.appendChild(o),
                    setTimeout(function() {
                        0 === o.offsetHeight ? $("body").addClass("adblock") : "3030" !== location.port || l.qs.ads || $(".don-draper ins").each(function() {
                            var e = document.createElement("iframe");
                            e.src = "/merchandise/",
                            e.setAttribute("class", "dev-ad"),
                            e.frameBorder = 0,
                            e.scrolling = "no",
                            $(this).append(e)
                        });
                        o.parentNode.removeChild(o)
                    }, 100)
                }
            } catch (e) {}
        }),
        l.browser.supportsSvg || function(e) {
            if (e) {
                var t = "../";
                return "/" === document.location.pathname && (t = ""),
                $("#firefox-Logo").attr("src", t + "shared/images/Icon_Mozilla.png"),
                $("#Chrome-Logo").attr("src", t + "shared/images/Icon_Chrome.png"),
                $("#oldbrowser").show()
            }
            $("#oldbrowser").hide()
        }(!0),
        void 0 !== n && (t.exports = {
            loadPlayerFace: function(e, t, n) {
                var a = l.getFaceUrl(e, !1)
                  , i = l.getFaceUrl(e, !0)
                  , r = l.getHairClass(e);
                l.createFaceStyleElement(t.substr(1), a, i);
                var o = $(t + " .face-small")
                  , s = o.get(0).className.match(/hair-\w+/);
                s && (s = s[0],
                o.data("original-hair") || o.data("original-hair", s),
                o.removeClass(s)),
                o.addClass(r),
                o.data("current-hair", r),
                $(t + " small").text(n),
                $(t + " .face-small").css("margin", "auto"),
                $(t).css("margin-left", "-" + $(t).width() / 2 + "px")
            },
            addCheat: A,
            makePlayersSad: function(e) {
                for (var t = ["top-player", "bottom-player", "left-player", "right-player"], n = 0; n < t.length; n++)
                    -1 == e.indexOf(t[n]) ? b(t[n]) : w(t[n])
            },
            makePlayerSad: b,
            makePlayerHappy: w,
            makeAllPlayersHappy: function() {
                $(".avatar div").removeClass("sad")
            },
            SPEED: g,
            HTML_CARD_SUITS: o
        })
    }
    , {
        "./gamecontrol": 12,
        "./helper-functions": 13,
        "./temp-storage": 22,
        "./util": 23
    }],
    12: [function(e, t, n) {
        "use strict";
        var a = "notstarted"
          , i = null;
        t.exports = {
            isGameNotStarted: function() {
                return "notstarted" === a
            },
            isGameStarted: function() {
                return "started" === a
            },
            isGameFinished: function() {
                return "finished" === a
            },
            isStuck: function() {
                return "stuck" === a
            },
            startGame: function() {
                a = "started"
            },
            finishGame: function() {
                a = "finished"
            },
            stuck: function() {
                a = "stuck"
            },
            resetGameStatus: function() {
                a = "notstarted"
            },
            addRestartHandler: function(e) {
                i = e
            },
            canRestart: function() {
                return null !== i
            },
            restart: function() {
                if (null === i)
                    throw new Error('No restart handler has been registered. Check "canRestart()" before calling this function');
                i()
            }
        }
    }
    , {}],
    13: [function(e, t, n) {
        "use strict";
        var o = {
            x: -1,
            m: Math.pow(2, 32),
            a: 1664525,
            b: 1013904223,
            init: function(e) {
                void 0 === e && (e = -1),
                this.x = -1 == e ? Math.floor(Math.random() * this.m) : e
            },
            next: function() {
                return -1 == this.x && this.init(),
                this.x = (this.a * this.x + this.b) % this.m,
                this.x / (this.m - 1)
            }
        }
          , a = {
            shuffle: function(e, t) {
                void 0 === t && (t = -1);
                var n = e.length;
                if (0 !== n)
                    for (o.init(t); --n; ) {
                        var a = Math.floor(o.next() * (n + 1))
                          , i = e[n]
                          , r = e[a];
                        e[n] = r,
                        e[a] = i
                    }
            },
            remove: function(e, t) {
                var n = e.indexOf(t);
                return -1 !== n && (e.splice(n, 1),
                !0)
            },
            random: function(e) {
                return e[Math.floor(Math.random() * e.length)]
            }
        };
        var i = {
            info: function(e) {
                this.messages.push("INFO: " + e),
                this.level.match(/info|verbose|debug/) && (console.info ? console.info(e) : console.log("INFO: " + e))
            },
            messages: [],
            error: function(e) {
                this.messages.push("ERROR: " + e),
                console.error ? console.error(e) : console.log("ERROR: " + e)
            },
            debug: function(e) {
                this.messages.push("DEBUG: " + e),
                "debug" == this.level && (console.debug ? console.debug(e) : console.log("DEBUG: " + e))
            },
            warn: function(e) {
                this.messages.push("WARN: " + e),
                this.level.match(/info|verbose|warn|debug/) && (console.warn ? console.warn(e) : console.log("WARN: " + e))
            },
            toString: function() {
                return "gott log "
            },
            level: "info"
        };
        function r(e, t) {
            return 1 !== r.speed && (t = Math.floor(t / r.speed)),
            setTimeout(e, t)
        }
        function s(e, t) {
            return 1 !== s.speed && (t = Math.floor(t / s.speed)),
            setInterval(e, t)
        }
        s.speed = r.speed = 1,
        void 0 !== n && (t.exports = {
            captainsLog: i,
            dataBind: function(e, o) {
                return e.replace(/@(\w+(\.\w+)*)/g, function(e, t) {
                    for (var n, a = t.split("."), i = o, r = 0; r < a.length; r++) {
                        if (n = a[r],
                        void 0 === i)
                            return "<undefined>";
                        if (null === i || null === i[n])
                            return "<null>";
                        if (void 0 === i[n])
                            return "<undefined>";
                        i = i[n]
                    }
                    return "" + i
                })
            },
            _setTimeout: r,
            _setInterval: s,
            randomInt: function(e, t) {
                return Math.floor(Math.random() * (t - e + 1)) + e
            },
            ArrayUtils: a,
            addDelaysToFunctions: function(e, t) {
                function n(e, t, n) {
                    var a = e[t];
                    if (!a)
                        throw new Error("Unrecognized func name: " + t);
                    e[t] = function() {
                        var e = this
                          , t = arguments;
                        r(function() {
                            a.apply(e, t)
                        }, n)
                    }
                }
                for (var a in t) {
                    n(e, a, t[a])
                }
            },
            cson: function(e) {
                return "undefined" == typeof JSON ? "JSON Not Available" : JSON.stringify(function e(t) {
                    var n = Object.prototype.toString;
                    if ("undefined" == typeof JSON)
                        return "JSON Not Available";
                    if (null == t)
                        return t;
                    if (t.name || t.shortName)
                        return t.name || t.shortName;
                    if ("[object Array]" == n.call(t)) {
                        for (var a = [], i = 0; i < t.length; i++)
                            a.push(e(t[i]));
                        return a
                    }
                    if ("[object Object]" != n.call(t))
                        return t;
                    var r = {};
                    for (var o in t)
                        r[o] = e(t[o]);
                    return r
                }(e), null, 2).replace(/\s*"([HSDC]\d\d?)"\s*(\]|,)/gm, "$1$2").replace(/"([HSDC]\d\d?)"/gm, "$1")
            },
            combinations: function(e, i) {
                return function e(t, n, a) {
                    if (0 !== t.length || 0 !== n.length)
                        return 0 === n.length ? i ? t.length >= i && a.push(t) : a.push(t) : (e(t.concat(n[0]), n.slice(1, n.length), a),
                        e(t, n.slice(1, n.length), a)),
                        a
                }([], e, [])
            }
        })
    }
    , {}],
    14: [function(e, t, n) {
        "use strict";
        var l = e("../util")
          , a = e("./multiplayer-util")
          , i = a.normalizeTable
          , r = a.emitBlockList
          , o = a.randomId
          , s = a.setupMultiplayerLogging
          , u = e("../helper-functions").captainsLog
          , c = e("../statistics")
          , d = e("../temp-storage")
          , h = e("./name-handler")
          , f = function() {
            function e(e, t) {
                var n = this;
                if (this.slug = e,
                this.roomId = t,
                this.tempStorage = new d(e),
                s(),
                l.siteSettings.multiplayerPublicId || (l.siteSettings.set("multiplayerPublicId", o()),
                l.siteSettings.set("multiplayerPrivateId", o())),
                this.publicId = l.siteSettings.multiplayerPublicId,
                this.privateId = l.siteSettings.multiplayerPrivateId,
                this.playerInfo = {},
                this.declineCount = 0,
                this.setupEventHandlers(),
                h(function() {
                    return n.newNameReady()
                }, function(e) {
                    return n.changedNameReady(e)
                }),
                l.siteSettings.multiplayerGameInProgress && !l.qs.gid) {
                    var a = Math.max(0, l.siteSettings.playerRating - 3);
                    u.debug("Are on offline page, with multiplayerGameInProgress=true, decreasing playerRating by 3 points!"),
                    l.siteSettings.set("playerRating", a),
                    l.siteSettings.set("multiplayerGameInProgress", !1)
                }
                var i = this.tempStorage.get("connectlobby");
                i && i > (new Date).getTime() && !l.qs.gid && this.connect()
            }
            var t = e.prototype;
            return t.newNameReady = function() {
                $(".multiplayer-lobby-link").click()
            }
            ,
            t.changedNameReady = function(e) {
                e.newName !== e.oldName && ($(".player-" + l.siteSettings.multiplayerPublicId + " small").text(l.siteSettings.playerName),
                this.socket.emit("name-change", l.siteSettings.playerName))
            }
            ,
            t.message = function(e) {
                $("#challenge-lobby-message").html(e)
            }
            ,
            t.showCover = function() {
                $("#cover").fadeIn(200)
            }
            ,
            t.hideCover = function() {
                $("#cover").fadeOut(200)
            }
            ,
            t.showDialog = function(e) {
                this.showCover(),
                $(e).show()
            }
            ,
            t.hideDialog = function(e) {
                $(e).hide(),
                "#multiplayer-challenge-lobby" !== e && this.lobbyWindowOpen ? $("#multiplayer-challenge-lobby").show() : this.hideCover()
            }
            ,
            t.setupEventHandlers = function() {
                function e(e, t) {
                    return $(e).on("click", t.bind(n))
                }
                var n = this;
                e(".multiplayer-lobby-link", this.openMultiplayerLobby),
                e(".close-multiplayer", this.closeMultiplayerLobby),
                e("#disconnect-lobby", this.manualDisconnect),
                e(".close-dialog", this.closeAllDialogs),
                $(".online-players-list").on("click", ".online-player", function(e) {
                    return n.sendChallenge(e)
                }),
                e("#cancel-invite", this.cancelChallenge),
                e("#accept-multiplayer", this.acceptChallenge),
                e("#decline-multiplayer", this.declineChallenge),
                e("#decline-and-block-multiplayer", this.declineAndBlock)
            }
            ,
            t.setupMessageHandlers = function() {
                function e(e, t) {
                    return n.socket.on(e, t.bind(n))
                }
                var n = this;
                e("connect", this.onConnect),
                e("disconnect", this.onDisconnect),
                e("connect_error", this.onConnectError),
                e("reconnection", this.onReconnect),
                e("start-game", this.onStartGame),
                e("players-online-full", this.onPlayersOnlineFull),
                e("players-online-delta", this.onPlayersOnlineDelta),
                e("online-count", this.onOnlineCount),
                e("name-change", this.onNameChange),
                e("challenge-received", this.challengeReceived),
                e("challenge-accepted", this.challengeAccepted),
                e("challenge-declined", this.challengeDeclined),
                e("challenge-cancelled", this.challengeCancelled),
                e("update-app", this.onUpdateApp)
            }
            ,
            t.createConnectionUrl = function() {
                var e, t = this.slug;
                e = "cardgames.io" === location.hostname || "production" === l.qs.server || APP_MODE ? "https://" + t + ".cardgames.io/" : "https://dev.cardgames.io:3031/";
                var n = l.siteSettings.players.bottom.code
                  , a = l.siteSettings.playerName
                  , i = l.siteSettings.playerRating;
                return this.roomId && (t += "-" + this.roomId),
                e += "lobby",
                e += "?face=" + n + "&name=" + a + "&publicId=" + this.publicId + "&privateId=" + this.privateId + "&clientversion=" + siteVersion + "&game=" + t + "&type=challenge&rating=" + i
            }
            ,
            t.openMultiplayerLobby = function(e) {
                var t = this;
                e.preventDefault(),
                l.mobileMenu.close(),
                this.lobbyWindowOpen = !0;
                try {
                    window.sessionStorage.getItem("nothing")
                } catch (e) {
                    return this.showDialog("#no-cookies"),
                    $("#no-cookies").show(),
                    void $("#no-cookies button").on("click", function(e) {
                        t.hideDialog("#no-cookies")
                    })
                }
                if (!l.siteSettings.playerName || "You" === l.siteSettings.playerName)
                    return this.showDialog("#enter-name"),
                    void $("#name-new").focus();
                if (this.showDialog("#multiplayer-challenge-lobby"),
                l.isMobileLookActive()) {
                    var n = $("#challenge-lobby-message").height()
                      , a = $("#multiplayer-challenge-lobby .button-container").position().top - n - 52 - 20;
                    $(".online-players-list").height(Math.floor(a))
                }
                this.setReconnectExpiry(),
                this.connect(),
                this.socket && this.socket.connected && this.socket.emit("open-lobby-window")
            }
            ,
            t.closeMultiplayerLobby = function() {
                this.hideDialog("#multiplayer-challenge-lobby"),
                this.socket.emit("close-lobby-window"),
                this.lobbyWindowOpen = !1
            }
            ,
            t.setReconnectExpiry = function() {
                var e = (new Date).getTime() + 18e5;
                this.tempStorage.set("connectlobby", e)
            }
            ,
            t.closeAllDialogs = function() {
                $(".multiplayer-dialog").hide(),
                this.lobbyWindowOpen ? $("#multiplayer-challenge-lobby").show() : this.hideCover()
            }
            ,
            t.onUpdateApp = function() {
                this.disconnect(),
                $("#multiplayer-button").text("Multiplayer"),
                this.message("Hi. It looks like you're using an old version of our app. Please update to the latest version to continue playing our multiplayer games 😎."),
                $("#disconnect-lobby").hide(),
                this.tempStorage.remove("connectlobby"),
                this.lobbyWindowOpen = !1
            }
            ,
            t.manualDisconnect = function(e) {
                e.preventDefault(),
                this.disconnect(),
                $("#multiplayer-button").text("Multiplayer"),
                $(".multiplayer-dialog").hide(),
                this.showDialog("#manual-disconnect"),
                this.tempStorage.remove("connectlobby"),
                this.lobbyWindowOpen = !1
            }
            ,
            t.onStartGame = function(e) {
                i(e, this.publicId),
                this.tempStorage.set(e.id, e),
                this.isStarting = !0,
                c.cancelGame(),
                location.href = "/" + this.slug + "/?gid=" + e.id
            }
            ,
            t.setOnlineCount = function(e) {
                10 <= e ? $("#multiplayer-button").text("Online (10+)") : $("#multiplayer-button").text("Online (" + e + ")"),
                e <= 1 ? this.message('You are the only player online. Just click "Close", if more players come online they\'ll see you and can challenge you to a game.') : this.message('These players are currently online. Click on them to challenge them to a game. <br>A player with <span class="checkmark">✓</span> has finished at least their last 3 games.')
            }
            ,
            t.onPlayersOnlineFull = function(e) {
                $("#connection-error").remove(),
                $(".online-player").each(function() {
                    var t = $(this).data("id");
                    e.find(function(e) {
                        return e.id === t
                    }) || $(this).remove()
                });
                var t = e
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i;
                    0 === $(".player-" + r.id).length && this.createPlayerDiv(r),
                    this.playerInfo[r.id] = r
                }
                this.setOnlineCount(e.length),
                this.updateScrollBars()
            }
            ,
            t.onNameChange = function(e, t) {
                e !== l.siteSettings.multiplayerPublicId && $(".player-" + e + " small").text(t)
            }
            ,
            t.updateScrollBars = function() {
                var e = $(".online-players-list")
                  , t = e.get(0);
                t.scrollHeight > t.clientHeight ? e.addClass("large") : e.removeClass("large")
            }
            ,
            t.onOnlineCount = function(e) {
                this.setOnlineCount(e)
            }
            ,
            t.sendChallenge = function(e) {
                var t = $(e.currentTarget).data("id");
                if (this.declineCount = 0,
                t === l.siteSettings.multiplayerPublicId)
                    return $("#multiplayer-challenge-lobby").hide(),
                    $("#challenge-yourself input").val(l.siteSettings.playerName),
                    setTimeout(function() {
                        return $("#challenge-yourself input").focus()
                    }, 200),
                    void this.showDialog("#challenge-yourself");
                this.opponent = this.playerInfo[t],
                this.socket.emit("send-challenge", t),
                l.preloadBackgroundImage(l.getFaceUrl(this.opponent.face, !0)),
                this.showChallengeDialog("#challenge-sent")
            }
            ,
            t.cancelChallenge = function() {
                this.socket.emit("cancel-challenge", this.opponent.id),
                this.lobbyWindowOpen ? ($("#challenge-sent").hide(),
                $("#multiplayer-challenge-lobby").show()) : this.hideDialog("#challenge-sent"),
                delete this.opponent
            }
            ,
            t.acceptChallenge = function() {
                var e = this.tempStorage.get("declined-challenges", {});
                delete e[this.opponent.id],
                this.tempStorage.set("declined-challenges", e),
                this.lobbyWindowOpen = !1,
                this.socket.emit("accept-challenge", this.opponent.id),
                this.showChallengeDialog("#challenge-accepted-you"),
                this.declineCount = 0
            }
            ,
            t.declineAndBlock = function() {
                var e = l.siteSettings.blocked;
                e[this.opponent.id] = {
                    name: this.opponent.name,
                    face: this.opponent.face,
                    time: (new Date).getTime()
                },
                l.siteSettings.set("blocked", e),
                l.forceTrackEvent("BlockAfterChallenge", "User " + l.siteSettings.playerName + " has blocked user " + this.opponent.name),
                r(this.socket, Object.keys(e)),
                this.declineChallenge()
            }
            ,
            t.declineChallenge = function() {
                var e = this.tempStorage.get("declined-challenges", {});
                e[this.opponent.id] ? e[this.opponent.id] += 1 : e[this.opponent.id] = 1,
                this.tempStorage.set("declined-challenges", e),
                this.socket.emit("decline-challenge", this.opponent.id),
                this.hideDialog("#challenge-received"),
                delete this.opponent,
                this.declineCount++,
                this.checkForDeclineLimit()
            }
            ,
            t.checkForDeclineLimit = function() {
                6 <= this.declineCount && (this.disconnect(),
                $("#multiplayer-button").text("Multiplayer"),
                $("#cover").hide(),
                $(".multiplayer-dialog").hide(),
                this.tempStorage.remove("connectlobby"),
                this.lobbyWindowOpen = !1,
                this.declineCount = 0)
            }
            ,
            t.showChallengeDialog = function(e, t) {
                void 0 === t && (t = !1),
                $(".multiplayer-dialog").hide(),
                $(e + " p span").text(this.opponent.name);
                var n = l.getFaceUrl(this.opponent.face, t);
                $(e + " .player-image").css("background-image", "url(" + n + ")"),
                3 <= this.opponent.rating ? $(e + " .player-image").addClass("finisher") : $(e + " .player-image").removeClass("finisher");
                var a = l.siteSettings.favorite;
                this.opponent.id in a ? $(e + " .player-image").addClass("favorite-player") : $(e + " .player-image").removeClass("favorite-player"),
                this.showDialog(e)
            }
            ,
            t.challengeReceived = function(e) {
                this.opponent = e,
                l.preloadBackgroundImage(l.getFaceUrl(this.opponent.face, !0));
                var t = this.tempStorage.get("declined-challenges", {})[e.id];
                t && 2 <= t ? $("#decline-and-block-multiplayer").text("Decline & Block " + e.name).show() : $("#decline-and-block-multiplayer").hide(),
                this.showChallengeDialog("#challenge-received")
            }
            ,
            t.challengeAccepted = function() {
                this.lobbyWindowOpen = !1,
                this.showChallengeDialog("#challenge-accepted")
            }
            ,
            t.challengeCancelled = function(e) {
                if (this.opponent)
                    if (this.opponent.id === e) {
                        if ($("#challenge-accepted-you").is(":visible"))
                            return this.showChallengeDialog("#challenge-cancelled", !0),
                            void delete this.opponent;
                        if ($("#challenge-received").is(":visible"))
                            return this.showChallengeDialog("#challenge-cancelled", !0),
                            this.declineCount++,
                            this.checkForDeclineLimit(),
                            void delete this.opponent;
                        u.debug("Ignoring cancelled challenge from " + this.opponent.name + ", we have no dialog showing!"),
                        delete this.opponent
                    } else
                        u.debug("Ignoring cancelled challenge from id=" + e + ", we are being challenged by " + this.opponent.name);
                else
                    u.debug("Ignoring cancelled challenge from id=" + e)
            }
            ,
            t.challengeDeclined = function(e, t) {
                if (this.opponent && this.opponent.id === e) {
                    var n = ["Probably afraid of you.", "Maybe they had to go wash their hair.", "Maybe they spontaneously combusted.", "Perhaps they had a food related emergency.", "Probably knew how good you are at this game.", "Maybe afraid to lose!"];
                    u.debug("invite-rejected, reason=" + t);
                    var a = n[Math.floor(Math.random() * n.length)]
                      , i = this.opponent.name
                      , r = "Sorry, " + i + " declined your challenge. " + a;
                    "disconnected" === t ? r = i + " has just disconnected and can't accept your challenge. Try someone else." : "challenging" === t ? r = i + " is currently challenging someone else and can't reply to your challenge. Try someone else." : "challenged" === t && (r = i + " is currently being challenged by someone else and can't respond to your challenge. Try someone else."),
                    $("#challenge-declined p").text(r),
                    this.showChallengeDialog("#challenge-declined", !0),
                    delete this.opponent
                }
            }
            ,
            t.onPlayersOnlineDelta = function(e) {
                var t = e.newPlayers
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i;
                    0 === $(".player-" + r.id).length && this.createPlayerDiv(r),
                    this.playerInfo[r.id] = r
                }
                var o = function() {
                    if (l) {
                        if (u >= s.length)
                            return "break";
                        c = s[u++]
                    } else {
                        if ((u = s.next()).done)
                            return "break";
                        c = u.value
                    }
                    var e = $(".player-" + c);
                    e.fadeOut(function() {
                        return e.remove()
                    })
                }
                  , s = e.removedPlayerIds
                  , l = Array.isArray(s)
                  , u = 0;
                for (s = l ? s : s[Symbol.iterator](); ; ) {
                    var c;
                    if ("break" === o())
                        break
                }
                this.message('These players are currently online. Click on them to challenge them to a game. <br>A player with <span class="checkmark">✓</span> has finished at least their last 3 games.'),
                this.setOnlineCount($(".online-player").length - e.removedPlayerIds.length),
                this.updateScrollBars(),
                $("#connection-error").remove()
            }
            ,
            t.createPlayerDiv = function(e) {
                var t = $("<span>").addClass("online-player").addClass("player-" + e.id).data("id", e.id).data("face", e.face)
                  , n = "hair-" + (e.face.length <= 2 ? e.face : e.face.charAt(2))
                  , a = e.name;
                e.id === this.publicId && a !== l.siteSettings.playerName && (a = l.siteSettings.playerName);
                var i = l.getFaceUrl(e.face, !1)
                  , r = $("<div>").addClass("face-small").addClass(n).css("background-image", "url(" + i + ")")
                  , o = $("<small>").text(a);
                t.append(r).append(o),
                3 <= e.rating && t.addClass("finisher");
                var s = l.siteSettings.favorite;
                e.id in s && t.addClass("favorite-player"),
                t.appendTo(".online-players-list")
            }
            ,
            t.showMessageBox = function(e, t) {
                $("#error-message-box h3").text(e),
                $("#error-message-box p").text(t),
                $("#error-message-box").show()
            }
            ,
            t.connect = function() {
                if (l.qs.gid)
                    this.message("You are already playing a multiplayer game, you can't start another one right now");
                else {
                    if (!this.socket) {
                        var e = this.createConnectionUrl();
                        u.debug("Connection url: " + e),
                        this.socket = io(e, {
                            reconnection: !0,
                            reconnectAttempts: 10
                        }),
                        this.setupMessageHandlers()
                    }
                    this.socket.connected || this.socket.connect()
                }
            }
            ,
            t.disconnect = function() {
                this.socket && this.socket.connected && this.socket.disconnect()
            }
            ,
            t.onDisconnect = function(e) {
                u.debug("Socket disconnected: " + e),
                "io server disconnect" === e && ($("#multiplayer-button").text("Multiplayer"),
                $(".multiplayer-dialog, #cover").hide(),
                this.tempStorage.remove("connectlobby"),
                this.lobbyWindowOpen = !1)
            }
            ,
            t.onConnect = function() {
                u.debug("Socket connected"),
                $("#connection-error").remove(),
                $("#multiplayer-challenge-lobby").is(":visible") && this.socket.emit("open-lobby-window"),
                r(this.socket, Object.keys(l.siteSettings.blocked)),
                this.setupVisibilityHandling()
            }
            ,
            t.setupVisibilityHandling = function() {
                var e = this;
                if (!this.hasSetupVisibilityHandling) {
                    var t = !1;
                    document.addEventListener("visibilitychange", function() {
                        "hidden" === document.visibilityState && e.socket && e.socket.connected && (t = !0,
                        u.debug("Disconnecting, page is hidden"),
                        e.disconnect()),
                        "visible" === document.visibilityState && t && (e.connect(),
                        u.debug("Connecting, page is visible again!"),
                        t = !1)
                    }),
                    this.hasSetupVisibilityHandling = !0
                }
            }
            ,
            t.onReconnect = function(e) {
                u.debug("Reconnected: " + e),
                $("#multiplayer-challenge-lobby").is(":visible") && this.socket.emit("open-lobby-window")
            }
            ,
            t.onConnectError = function(e) {
                u.error("Connection error: " + e),
                0 === $("#connection-error").length && $(".online-players-list").html($("<div/>").attr("id", "connection-error").text("CONNECTION ERROR 😟").append($("<div/>").text("Trying to reconnect..."))),
                this.message("")
            }
            ,
            e
        }();
        t.exports = f
    }
    , {
        "../helper-functions": 13,
        "../statistics": 21,
        "../temp-storage": 22,
        "../util": 23,
        "./multiplayer-util": 16,
        "./name-handler": 17
    }],
    15: [function(e, t, n) {
        "use strict";
        var h = e("../util")
          , s = e("../helper-functions").captainsLog
          , a = e("./multiplayer-util").normalizeTable
          , u = e("./speech-handler")
          , c = e("../temp-storage")
          , l = 1e3;
        h.qs.nodisconnect && h.cake("nodisconnect", "1", 100, "/");
        var i = function() {
            function e(e, t, n) {
                var a = this;
                this.slug = e,
                this.table = t,
                this.players = n,
                this.publicId = h.siteSettings.multiplayerPublicId,
                this.privateId = h.siteSettings.multiplayerPrivateId,
                this.handlers = {},
                this.speechHandler = new u(function(e) {
                    return a.sendPhrase(e)
                }
                ),
                this.receivedMoves = [{
                    nr: 0
                }],
                this.sentMoves = [{
                    nr: 0
                }],
                this.tempStorage = new c(e),
                this.pageLoadId = Math.floor(1e6 * Math.random());
                var i = function() {
                    if (o) {
                        if (s >= r.length)
                            return "break";
                        l = r[s++]
                    } else {
                        if ((s = r.next()).done)
                            return "break";
                        l = s.value
                    }
                    var t = l;
                    a.players.find(function(e) {
                        return e.multiplayerId === t.id
                    }).bot = t.bot
                }
                  , r = this.table.players
                  , o = Array.isArray(r)
                  , s = 0;
                for (r = o ? r : r[Symbol.iterator](); ; ) {
                    var l;
                    if ("break" === i())
                        break
                }
                this.setupSubstituteMoves(),
                this.setupConcedeHandler(),
                this.setupRematchHandler(),
                this.setupTurnOffTimerHandler(),
                this.setupBlockMuteFavoriteHandler(),
                $(document).on("visibilitychange", function() {
                    return a.visibilityChange()
                }),
                setTimeout(function() {
                    return a.startVisibility()
                }, 3e3),
                window.addEventListener("beforeunload", function() {
                    return a.beforeUnloadWindow()
                })
            }
            var t = e.prototype;
            return t.setupSubstituteMoves = function() {
                var i = this
                  , r = this.players
                  , e = function() {
                    if (n) {
                        if (o >= t.length)
                            return "break";
                        s = t[o++]
                    } else {
                        if ((o = t.next()).done)
                            return "break";
                        s = o.value
                    }
                    var a = s;
                    "bottom-player" === a.id ? a.shouldMakeSubstituteMove = function() {
                        return !1
                    }
                    : a.shouldMakeSubstituteMove = function() {
                        if (!a.offline)
                            return !1;
                        if (((new Date).getTime() - a.offline) / l < 10)
                            return !1;
                        for (var e = r.indexOf(a), t = e + 1; t <= e + 3; t++) {
                            var n = r[t % r.length];
                            if (!n.offline)
                                return n.multiplayerId === i.publicId
                        }
                        return !1
                    }
                }
                  , t = this.players
                  , n = Array.isArray(t)
                  , o = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var s;
                    if ("break" === e())
                        break
                }
            }
            ,
            t.on = function(e, t) {
                this.handlers[e] || (this.handlers[e] = []),
                this.handlers[e].push(t)
            }
            ,
            t.fireEvent = function(e, t) {
                if (this.handlers[e]) {
                    var n = this.handlers[e]
                      , a = Array.isArray(n)
                      , i = 0;
                    for (n = a ? n : n[Symbol.iterator](); ; ) {
                        var r;
                        if (a) {
                            if (i >= n.length)
                                break;
                            r = n[i++]
                        } else {
                            if ((i = n.next()).done)
                                break;
                            r = i.value
                        }
                        r({
                            type: e,
                            data: t
                        })
                    }
                }
            }
            ,
            t.beforeUnloadWindow = function() {
                if (!this.gameFinished && h.siteSettings.multiplayerGameInProgress && 1 < this.onlinePlayerCount()) {
                    s.debug("Abandoning game that still has active players, setting rating to rating - 3"),
                    h.siteSettings.set("multiplayerGameInProgress", !1);
                    var e = Math.max(0, h.siteSettings.playerRating - 3);
                    h.siteSettings.set("playerRating", e),
                    h.siteSettings.playerRating < 3 && this.onlinePlayerCount() === this.table.playerCount.maxPlayers && (h.siteSettings.set("quitCount", Math.min(10 - h.siteSettings.playerRating, (h.siteSettings.quitCount || 0) + 1)),
                    h.siteSettings.set("connectionBan", (new Date).getTime() + l * (30 * (h.siteSettings.quitCount - 1))))
                }
                this.gameFinished || 2 !== this.table.playerCount.maxPlayers || this.sendMove({
                    type: "forcequit",
                    reason: "abandon",
                    playerId: this.players[0].multiplayerId
                })
            }
            ,
            t.startVisibility = function(e) {
                var t = this;
                if (void 0 === e && (e = 1),
                "visible" === document.visibilityState && this.socket.connected)
                    this.socket.emit("visible"),
                    this.hidden = !1;
                else {
                    var n = this.tempStorage.get("lastvisibility");
                    if (n && "hidden" === n.visibility) {
                        var a = n.pageLoadId !== this.pageLoadId;
                        h.forceTrackEvent("StartVisible", "State: " + document.visibilityState + ", Connected: " + this.socket.connected + ", lastEventWasBeforeReload: " + a + ", Agent: " + navigator.userAgent + ", Attempt: " + e, 0, h.siteSettings.playerName),
                        e <= 5 ? setTimeout(function() {
                            return t.startVisibility(e + 1)
                        }, l) : this.socket.connected && (this.socket.emit("visible"),
                        this.hidden = !1,
                        this.tempStorage.set("lastvisibility", {
                            pageLoadId: this.pageLoadId,
                            time: (new Date).getTime(),
                            visibility: "visible",
                            forced: !0
                        }),
                        h.forceTrackEvent("StartVisible", "Forced a visible event, even though state is: " + document.visibilityState, 0, h.siteSettings.playerName))
                    }
                }
            }
            ,
            t.visibilityChange = function() {
                this.gameFinished || ("visible" === document.visibilityState ? this.socket.connected && (this.socket.emit("visible"),
                this.hidden = !1,
                this.tempStorage.set("lastvisibility", {
                    pageLoadId: this.pageLoadId,
                    time: (new Date).getTime(),
                    visibility: "visible"
                })) : "hidden" === document.visibilityState && this.socket.connected && (this.socket.emit("hidden"),
                this.hidden = !0,
                this.tempStorage.set("lastvisibility", {
                    pageLoadId: this.pageLoadId,
                    time: (new Date).getTime(),
                    visibility: "hidden"
                })))
            }
            ,
            t.connect = function() {
                var n = this
                  , e = this.slug
                  , t = h.siteSettings.players.bottom.code
                  , a = h.siteSettings.playerName;
                if (!t || !a)
                    throw new Error("No face or name, no connection can be made");
                var i = "https://" + this.table.hostname + "/lobby"
                  , r = h.siteSettings.playerRating;
                i += "?face=" + t + "&name=" + a + "&publicId=" + this.publicId + "&privateId=" + this.privateId + "&clientversion=" + siteVersion + "&game=" + e + "&tableId=" + this.table.id + "&round=" + this.table.round + "&rating=" + r,
                s.debug("Connecting to " + i);
                this.socket = io(i, {
                    reconnection: !0,
                    reconnectAttempts: 10
                });
                function o(e, t) {
                    return n.socket.on(e, t.bind(n))
                }
                o("connect", this.onConnect),
                o("disconnect", this.onDisconnect),
                o("player-online", this.onPlayerOnline),
                o("player-offline", this.onPlayerOffline),
                o("table-state", this.onTableState),
                o("players-ready", this.onPlayersReady),
                o("move", this.onMove),
                o("next-table", this.onNextTable),
                o("speak", this.onSpeak),
                o("table-not-found", this.onTableNotFound),
                o("get-out", this.onGetOut),
                o("sync-moves", this.onSyncMoves),
                o("migrate", this.onMigrate),
                o("rematch", this.onRematch),
                o("turn-off-timer", this.onTurnOffTimer),
                o("check-visible", this.onCheckVisible),
                o("start-game", this.onStartGame),
                o("custom-message", this.onCustomMessage),
                $(".exit-multiplayer-game").on("click", function() {
                    return location.href = location.pathname
                }),
                this.speechHandler.enable()
            }
            ,
            t.sendPhrase = function(e) {
                this._phraseTrack || (this._phraseTrack = []);
                try {
                    this._phraseTrack.push({
                        time: (new Date).getTime(),
                        id: e,
                        toString: function() {
                            return this.id + ":" + new Date(this.time).toISOString().substr(11)
                        }
                    })
                } catch (e) {}
                var t = (new Date).getTime();
                6 <= this._phraseTrack.length && t - this._phraseTrack[this._phraseTrack.length - 6].time < l && (h.forceTrackEvent("HackerMoron", "Sending phrases " + this._phraseTrack + " too quickly. Name: " + this.players[0].name + ", id: " + this.players[0].id),
                this._phraseTrack = []),
                this.checkMandalorianEasterEgg(e);
                var n = "";
                "your-turn" === e && (n = "Sent: " + this.sentMoves.length + ", received: " + this.receivedMoves.length,
                window.game && window.game.currentPlayer && (n += " CURRENT PLAYER ID " + window.game.currentPlayer.multiplayerId)),
                this.socket.emit("speak", e, n)
            }
            ,
            t.checkMandalorianEasterEgg = function(e) {
                var n = this;
                "this-is-the-way" === e && (h.siteSettings.set("mandalorian", h.siteSettings.mandalorian + 1),
                3 === h.siteSettings.mandalorian && ($(".m-name").text("Mandalorian"),
                this.showDialog("#mandalorian"),
                $("#mandalorian-no").on("click", function() {
                    h.trackEvent("Mandalorian", "No", 0, "", "", 1),
                    n.hideDialog("#mandalorian")
                }),
                $("#mandalorian-yes").on("click", function() {
                    h.trackEvent("Mandalorian", "Yes", 0, "", "", 1);
                    var e = h.siteSettings.players;
                    e.bottom.code = "19",
                    e.bottom.face = "/shared/images/svg/face-19.svg",
                    e.bottom.faceSad = e.bottom.face,
                    e.bottom.type = "classic",
                    h.siteSettings.set("players", e);
                    var t = ".face-bottom-player, .face-bottom-player.sad { background-image:url(" + e.bottom.face + ");}";
                    $("<style/>").text(t).appendTo("head"),
                    n.hideDialog("#mandalorian")
                })))
            }
            ,
            t.showDialog = function(e) {
                $("#cover").fadeIn(),
                $(e).show()
            }
            ,
            t.setupConcedeHandler = function() {
                var e = this;
                $("#concede").on("click", function() {
                    e.showDialog("#concede-dialog")
                }),
                $("#concede-dialog button").on("click", function() {
                    e.hideDialog("#concede-dialog")
                }),
                $("#concede-confirm").on("click", function() {
                    e.fireEvent("forcequit", {
                        player: e.players[0],
                        reason: "concede"
                    }),
                    e.sendMove({
                        type: "forcequit",
                        reason: "concede",
                        playerId: e.players[0].multiplayerId
                    })
                })
            }
            ,
            t.setupBlockMuteFavoriteHandler = function() {
                var a, i = this;
                function r() {
                    $("#" + a.id + ", #block-mute .player-image").toggleClass("blocked", !!a.blocked),
                    $("#block-player").text(a.blocked ? "Unblock" : "Block"),
                    $("#" + a.id + ", #block-mute .player-image").toggleClass("muted", !!a.muted),
                    $("#mute-player").text(a.muted ? "Unmute" : "Mute"),
                    $("#" + a.id + ", #block-mute .player-image").toggleClass("favorite-player", !!a.favorite),
                    $("#favorite-player").text(a.favorite ? "Unfavorite" : "Favorite"),
                    $("#block-mute h2").text("Block/mute " + a.name)
                }
                $("#top-player, #left-player, #right-player").on("click", function(e) {
                    if ("gofish" !== slug || 2 !== i.players[0].state) {
                        var t = e.currentTarget.id;
                        (a = i.players.find(function(e) {
                            return e.id === t
                        })).bot ? console.log("RETURNING BECAUSE BOT " + a.name) : (r(),
                        $("#block-mute .player-image").removeClass("face-top-player face-left-player face-right-player").addClass("face-" + t),
                        i.showDialog("#block-mute"))
                    } else
                        console.log("RETURNING BECAUSE GO FISH " + a.name)
                }),
                $("#cancel-block-mute").on("click", function(e) {
                    a = null,
                    i.hideDialog("#block-mute")
                }),
                $("#block-player").on("click", function(e) {
                    a.blocked = !a.blocked,
                    r();
                    var t = a.blocked ? "Block" : "Unblock";
                    h.forceTrackEvent(t, "User " + i.players[0].name + " has " + t.toLowerCase() + "ed user " + a.name);
                    var n = h.siteSettings.blocked;
                    a.blocked ? n[a.multiplayerId] = {
                        name: a.name,
                        face: a.face,
                        time: (new Date).getTime()
                    } : delete n[a.multiplayerId],
                    h.siteSettings.set("blocked", n)
                }),
                $("#mute-player").on("click", function(e) {
                    a.muted = !a.muted,
                    r();
                    var t = a.muted ? "Mute" : "Unmute";
                    h.forceTrackEvent(t, "User " + i.players[0].name + " has " + t.toLowerCase() + "d user " + a.name);
                    var n = h.siteSettings.muted;
                    a.muted ? n[a.multiplayerId] = {
                        name: a.name,
                        face: a.face,
                        time: (new Date).getTime()
                    } : delete n[a.multiplayerId],
                    h.siteSettings.set("muted", n)
                }),
                $("#favorite-player").on("click", function(e) {
                    a.favorite = !a.favorite,
                    r();
                    var t = a.favorite ? "Favorited" : "Unfavorited";
                    h.forceTrackEvent(t, "User " + i.players[0].name + " has " + t.toLowerCase() + "d user " + a.name);
                    var n = h.siteSettings.favorite;
                    a.favorite ? n[a.multiplayerId] = {
                        name: a.name,
                        face: a.face,
                        time: (new Date).getTime()
                    } : delete n[a.multiplayerId],
                    h.siteSettings.set("favorite", n)
                });
                var e = h.siteSettings.blocked
                  , t = h.siteSettings.muted
                  , n = h.siteSettings.favorite
                  , o = this.players
                  , s = Array.isArray(o)
                  , l = 0;
                for (o = s ? o : o[Symbol.iterator](); ; ) {
                    var u;
                    if (s) {
                        if (l >= o.length)
                            break;
                        u = o[l++]
                    } else {
                        if ((l = o.next()).done)
                            break;
                        u = l.value
                    }
                    var c = u;
                    e[c.multiplayerId] && (c.blocked = !0,
                    $("#" + c.id).addClass("blocked")),
                    t[c.multiplayerId] && (c.muted = !0,
                    $("#" + c.id).addClass("muted")),
                    n[c.multiplayerId] && (c.favorite = !0,
                    $("#" + c.id).addClass("favorite-player"))
                }
            }
            ,
            t.onCheckVisible = function() {
                this.socket.emit("confirm-visible", "visible" === document.visibilityState)
            }
            ,
            t.setupRematchHandler = function() {
                var e = this;
                $("#rematch-yes").on("click", function() {
                    e.socket.emit("rematch", !0),
                    2 === e.table.players.length ? $("#rematch-text").text("Waiting for response from your opponent...") : $("#rematch-text").text("Waiting for response from others..."),
                    $("#rematch-yes, #rematch-no").attr("disabled", "disabled")
                }),
                $("#rematch-no, #rematch-cancel").on("click", function() {
                    e.socket.emit("rematch", !1),
                    $("#rematch").remove(),
                    $("#suggest-rematch, .suggest-rematch").remove()
                }),
                $("#rematch-fail").on("click", function() {
                    $("#rematch").remove(),
                    $("#suggest-rematch, .suggest-rematch").attr("disabled", "disabled")
                }),
                $("#suggest-rematch, .suggest-rematch").on("click", function() {
                    return e.suggestRematch()
                })
            }
            ,
            t.setupTurnOffTimerHandler = function() {
                var e = this;
                if (this.table.noTimer) {
                    $("#ask-to-turn-off-timer").attr("disabled", "disabled"),
                    s.debug("Timer already turned off for table in previous rounds!");
                    var t = this.players
                      , n = Array.isArray(t)
                      , a = 0;
                    for (t = n ? t : t[Symbol.iterator](); ; ) {
                        var i;
                        if (n) {
                            if (a >= t.length)
                                break;
                            i = t[a++]
                        } else {
                            if ((a = t.next()).done)
                                break;
                            i = a.value
                        }
                        var r = i;
                        r.timer && r.timer.disable && (r.timer.disable(),
                        s.debug("Turned off timer for " + r.name)),
                        r._noTimer = !0
                    }
                } else
                    !1 === this.table.noTimer && ($("#ask-to-turn-off-timer").attr("disabled", "disabled"),
                    s.debug("Already asked for timer off on this table!")),
                    $("#turn-off-timer-yes").on("click", function() {
                        e.socket.emit("turn-off-timer", !0),
                        2 === e.table.players.length ? $("#turn-off-timer-text").text("Waiting for response from your opponent...") : $("#turn-off-timer-text").text("Waiting for response from others..."),
                        $("#turn-off-timer-yes, #turn-off-timer-no").attr("disabled", "disabled")
                    }),
                    $("#turn-off-timer-no").on("click", function() {
                        e.socket.emit("turn-off-timer", !1)
                    }),
                    $("#turn-off-timer-ok").on("click", function() {
                        $("#ask-to-turn-off-timer").attr("disabled", "disabled"),
                        e.hideDialog("#turn-off-timer")
                    }),
                    void 0 === this.table.noTimer && $("#ask-to-turn-off-timer").on("click", function() {
                        e.socket.emit("turn-off-timer", !0),
                        $("#phrases").fadeOut(200)
                    })
            }
            ,
            t.hideDialog = function(e) {
                $("#cover").fadeOut(),
                $(e).hide()
            }
            ,
            t.onConnect = function() {
                if (this.visibilityChange(),
                s.debug("Socket connected!"),
                this.hideDialog("#reconnecting"),
                this.updatePhrases(),
                1 < this.receivedMoves.length) {
                    var e = this.receivedMoves[this.receivedMoves.length - 1];
                    this.socket.emit("sync-moves", e.nr)
                }
            }
            ,
            t.onRematch = function(t, e, n) {
                var a = this
                  , i = $("#rematch")
                  , r = this.players.find(function(e) {
                    return e.multiplayerId === t
                });
                if (console.log("onRematch: " + n),
                this.gameFinished) {
                    if (n && h.forceTrackEvent("RematchActiveGame", t + " - " + r + ", delayed rematch worked!"),
                    !i.is(":visible")) {
                        var o = this.players
                          , s = Array.isArray(o)
                          , l = 0;
                        for (o = s ? o : o[Symbol.iterator](); ; ) {
                            var u;
                            if (s) {
                                if (l >= o.length)
                                    break;
                                u = o[l++]
                            } else {
                                if ((l = o.next()).done)
                                    break;
                                u = l.value
                            }
                            var c = u
                              , d = $("<div/>").addClass("rematch-face face-" + c.id);
                            $("#rematch-faces").append(d)
                        }
                        i.show()
                    }
                    r.rematch = e,
                    this.players.every(function(e) {
                        return e.rematch
                    }) && ($("#rematch-text").text("The rematch is on! Setting up your game table..."),
                    $("#rematch-yes, #rematch-no").attr("disabled", "disabled")),
                    e ? $("#rematch-faces .face-" + r.id).addClass("rematch-yes") : ($("#rematch-faces .face-" + r.id).addClass("rematch-no").addClass("sad"),
                    2 === this.table.players.length ? $("#rematch-text").text("Sorry, your opponent didn't want a rematch.") : $("#rematch-text").text("Sorry, not everyone wanted a rematch."),
                    $("#rematch-yes, #rematch-no, #rematch-cancel").hide(),
                    $("#rematch-fail").show(),
                    $("#suggest-rematch").remove())
                } else
                    n ? h.forceTrackEvent("RematchActiveGame", t + " - " + r + ". Was retry, stopping") : (h.forceTrackEvent("RematchActiveGame", t + " - " + r + ". Trying again in 5 seconds."),
                    setTimeout(function() {
                        return a.onRematch(t, e, !0)
                    }, 5e3))
            }
            ,
            t.onTurnOffTimer = function(t, e) {
                var n = this;
                $("#ask-to-turn-off-timer").attr("disabled", "disabled").off("click");
                var a = $("#turn-off-timer")
                  , i = this.players.find(function(e) {
                    return e.multiplayerId === t
                });
                if (!a.is(":visible") && !this.hasShownTimerDialog) {
                    var r = this.players
                      , o = Array.isArray(r)
                      , s = 0;
                    for (r = o ? r : r[Symbol.iterator](); ; ) {
                        var l;
                        if (o) {
                            if (s >= r.length)
                                break;
                            l = r[s++]
                        } else {
                            if ((s = r.next()).done)
                                break;
                            l = s.value
                        }
                        var u = l
                          , c = $("<div/>").addClass("turn-off-timer-face face-" + u.id);
                        $("#turn-off-timer-faces").append(c)
                    }
                    t === this.publicId ? (2 === this.players.length ? $("#turn-off-timer-text").text("You have asked for the timer to be turned off. Waiting for your opponent to respond...") : $("#turn-off-timer-text").text("You have asked for the timer to be turned off. Waiting for the other players to respond..."),
                    $("#turn-off-timer-yes, #turn-off-timer-no").hide(),
                    $("#turn-off-timer-ok").attr("disabled", "disabled").show()) : $("#turn-off-timer-text").text(i.name + " is asking whether you would like to turn the timer off, so you can take as long as you want to play. Do you want to turn it off?"),
                    this.showDialog("#turn-off-timer"),
                    setTimeout(function() {
                        return n.hideDialog("#turn-off-timer")
                    }, 25e3),
                    this.hasShownTimerDialog = !0,
                    $("#turn-off-timer-text").height($("#turn-off-timer-text").height())
                }
                if (i.turnOffTimer = e,
                this.players.every(function(e) {
                    return e.turnOffTimer
                })) {
                    $("#turn-off-timer h2").text("The timer is off!"),
                    $("#turn-off-timer-text").text("The timer has been turned off! Now enjoy your very slow game!"),
                    $("#turn-off-timer-yes, #turn-off-timer-no").hide(),
                    $("#turn-off-timer-ok").show().removeAttr("disabled"),
                    setTimeout(function() {
                        return n.hideDialog("#turn-off-timer")
                    }, 5e3);
                    var d = this.players
                      , h = Array.isArray(d)
                      , f = 0;
                    for (d = h ? d : d[Symbol.iterator](); ; ) {
                        var p;
                        if (h) {
                            if (f >= d.length)
                                break;
                            p = d[f++]
                        } else {
                            if ((f = d.next()).done)
                                break;
                            p = f.value
                        }
                        var m = p;
                        m.timer && m.timer.disable && m.timer.disable(),
                        m._noTimer = !0
                    }
                }
                e ? $("#turn-off-timer-faces .face-" + i.id).addClass("turn-off-timer-yes") : ($("#turn-off-timer h2").text("The timer will remain on!"),
                $("#turn-off-timer-faces .face-" + i.id).addClass("turn-off-timer-no").addClass("sad"),
                2 === this.table.players.length ? t === this.publicId ? ($("#turn-off-timer-text").text("You didn't want to turn off the timer, it will remain on!"),
                $("#turn-off-timer").hide()) : $("#turn-off-timer-text").text("Sorry, your opponent didn't want to turn off the timer, it will remain on!") : t === this.publicId ? $("#turn-off-timer-text").text("You didn't want to turn off the timer, it will remain on!") : $("#turn-off-timer-text").text("Sorry, not everyone wanted to turn off the timer, it will remain on!"),
                $("#turn-off-timer-yes, #turn-off-timer-no").hide(),
                $("#turn-off-timer-ok").show().removeAttr("disabled"),
                setTimeout(function() {
                    return n.hideDialog("#turn-off-timer")
                }, 5e3))
            }
            ,
            t.updatePhrases = function() {
                function n(e) {
                    $("#phrases-list, #emoji-list").html("");
                    var t = e.text
                      , n = Array.isArray(t)
                      , a = 0;
                    for (t = n ? t : t[Symbol.iterator](); ; ) {
                        var i;
                        if (n) {
                            if (a >= t.length)
                                break;
                            i = t[a++]
                        } else {
                            if ((a = t.next()).done)
                                break;
                            i = a.value
                        }
                        var r = i;
                        $("<div/>", {
                            id: r.id
                        }).addClass("speak-bubble").text(r.text).appendTo("#phrases-list")
                    }
                    var o = e.emoji
                      , s = Array.isArray(o)
                      , l = 0;
                    for (o = s ? o : o[Symbol.iterator](); ; ) {
                        var u;
                        if (s) {
                            if (l >= o.length)
                                break;
                            u = o[l++]
                        } else {
                            if ((l = o.next()).done)
                                break;
                            u = l.value
                        }
                        var c = u;
                        $("<div/>", {
                            id: c.id
                        }).addClass("emoji-speak").text(c.text).appendTo("#emoji-list")
                    }
                }
                $.get("https://cardgames.io/api/multiplayergames/phrases/").done(function(e) {
                    n(e),
                    s.debug("Loading phrases from internet..."),
                    h.siteSettings.set("multiplayerPhrases", e)
                }).fail(function(e) {
                    s.debug("Failed to load phrases: " + JSON.stringify(e)),
                    h.trackEvent("PhrasesError", "Status: " + e.status + ", statusText: " + e.statusText, 0, "", "", 1);
                    var t = h.siteSettings.multiplayerPhrases;
                    t.emoji && (s.debug("Loading last good phrases"),
                    n(t))
                })
            }
            ,
            t.onStartGame = function(e) {
                this.tempStorage.remove("joinedtable"),
                a(e, this.publicId),
                this.tempStorage.set(e.id, e),
                location.href = "/" + this.slug + "/?gid=" + e.id
            }
            ,
            t.suggestRematch = function() {
                this.gameFinished && (this.socket.emit("rematch", !0),
                $("#rematch-text").text("You suggested a rematch, waiting for response..."),
                $("#rematch-yes, #rematch-no").hide(),
                $("#rematch-cancel").show())
            }
            ,
            t.reconnectStep = function() {
                var e = this
                  , t = 10 - Math.round(((new Date).getTime() - this.disconnectTime) / l);
                this.socket.connected ? (this.hideDialog("#reconnecting"),
                delete this.disconnectTime) : t < 0 ? (this.socket.disconnect(),
                $("#reconnecting").hide(),
                $("#reconnecting-failed").show(),
                this.tempStorage.remove(h.qs.gid)) : ($("#reconnecting p span").text(t),
                setTimeout(function() {
                    return e.reconnectStep()
                }, l))
            }
            ,
            t.onGetOut = function() {
                this.gameFinished || 2 !== this.table.playerCount.maxPlayers && ($(".multiplayer-dialog").hide(),
                $("#cover").fadeIn(),
                $("#get-out").show(),
                this.socket.disconnect(),
                this.tempStorage.remove("scores"),
                h.deleteCake("results"))
            }
            ,
            t.onDisconnect = function(e) {
                var t = this;
                s.debug("Socket disconnected. Reason: " + e),
                this.gameFinished || "io client disconnect" !== e && (this.disconnectTime = (new Date).getTime(),
                setTimeout(function() {
                    return t.reconnectStep()
                }),
                this.showDialog("#reconnecting"),
                h.forceTrackEvent("Disconnect", e, 0, this.table.hostname, (new Date).getUTCHours().toString()))
            }
            ,
            t.onSyncMoves = function(e) {
                var t = this.sentMoves
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i;
                    r.nr > e && this.socket.emit("move", r)
                }
            }
            ,
            t.onPlayersReady = function(e) {
                var t = this.players
                  , n = Array.isArray(t)
                  , a = 0;
                for (t = n ? t : t[Symbol.iterator](); ; ) {
                    var i;
                    if (n) {
                        if (a >= t.length)
                            break;
                        i = t[a++]
                    } else {
                        if ((a = t.next()).done)
                            break;
                        i = a.value
                    }
                    var r = i;
                    e.includes(r.multiplayerId) && (r.offline = (new Date).getTime() - 2e4,
                    r.bot ? $(".p-" + r.multiplayerId).removeClass("offline") : $(".p-" + r.multiplayerId).addClass("offline"))
                }
                this.gameStartTime = (new Date).getTime(),
                s.debug("Players ready"),
                this.table.isPrivate || (s.debug("Players ready, setting multiplayerGameInProgress to true"),
                h.siteSettings.set("multiplayerGameInProgress", !0)),
                this.fireEvent("players-ready")
            }
            ,
            t.onTableNotFound = function() {
                this.gameFinished || this.showDialog("#table-not-found")
            }
            ,
            t.onMigrate = function(e) {
                this.table.hostname = e,
                this.socket.off("disconnect"),
                this.socket.disconnect(),
                this.connect()
            }
            ,
            t.onlinePlayerCount = function() {
                return this.players.filter(function(e) {
                    return !e.offline
                }).length
            }
            ,
            t.onPlayerOnline = function(t) {
                delete this.players.find(function(e) {
                    return e.multiplayerId === t
                }).offline,
                s.debug("Player online: " + t),
                $(".p-" + t).removeClass("offline"),
                1 < this.onlinePlayerCount() && !this.gameFinished && !this.table.isPrivate && (s.debug("More than us online, setting multiplayerGameInProgress to true"),
                h.siteSettings.set("multiplayerGameInProgress", !0))
            }
            ,
            t.onPlayerOffline = function(t) {
                s.debug("Player offline: " + t);
                var e = this.players.find(function(e) {
                    return e.multiplayerId === t
                });
                e && (e.offline = (new Date).getTime(),
                $("#suggest-rematch").is(":visible") && !e.rematch && $("#suggest-rematch").attr("disabled", "disabled"),
                $("#rematch").is(":visible") && !e.rematch && this.onRematch(t, !1)),
                $(".p-" + t).addClass("offline"),
                1 !== this.onlinePlayerCount() || this.gameFinished || (s.debug("Only us left, removing multiplayerGameInProgress"),
                h.siteSettings.set("multiplayerGameInProgress", !1))
            }
            ,
            t.onTableState = function(e) {
                var n = this;
                $("#top-player .face-small, #left-player .face-small, #right-player .face-small").addClass("offline");
                var t = this.players.filter(function(e) {
                    return "bottom-player" !== e.id
                })
                  , a = Array.isArray(t)
                  , i = 0;
                for (t = a ? t : t[Symbol.iterator](); ; ) {
                    var r;
                    if (a) {
                        if (i >= t.length)
                            break;
                        r = t[i++]
                    } else {
                        if ((i = t.next()).done)
                            break;
                        r = i.value
                    }
                    r.offline = (new Date).getTime()
                }
                var o = function() {
                    if (l) {
                        if (u >= s.length)
                            return "break";
                        c = s[u++]
                    } else {
                        if ((u = s.next()).done)
                            return "break";
                        c = u.value
                    }
                    var t = c;
                    $(".p-" + t).removeClass("offline"),
                    delete n.players.find(function(e) {
                        return e.multiplayerId === t
                    }).offline
                }
                  , s = e.onlinePlayers
                  , l = Array.isArray(s)
                  , u = 0;
                for (s = l ? s : s[Symbol.iterator](); ; ) {
                    var c;
                    if ("break" === o())
                        break
                }
            }
            ,
            t.onMove = function(t) {
                this.dmsg || (this.dmsg = "");
                try {
                    if (this.gameFinished)
                        return void (this.dmsg += "\nDropped move because game finished");
                    try {
                        if (localStorage.dropmoves && Math.random() <= .2)
                            return void s.debug("Dropping move " + t.nr)
                    } catch (e) {}
                    var e = this.receivedMoves[this.receivedMoves.length - 1];
                    if (t.nr <= e.nr)
                        return this.dmsg += "\nDropped move nr " + t.nr + ", last nr was " + e.nr,
                        void (t.resend ? s.debug("Got resent move " + t.nr + " that I didn't need") : h.trackEvent("OldMove", "Got move " + t.nr + ", last move nr was " + e.nr));
                    if (t.nr > e.nr + 1)
                        return h.trackEvent("FutureMove", "Got move " + t.nr + ", last move nr was " + e.nr),
                        this.socket.emit("sync-moves", e.nr),
                        void (this.dmsg += "\nDropped move nr " + t.nr + ", last nr was " + e.nr);
                    this.receivedMoves.push(t);
                    var n = this.players.find(function(e) {
                        return e.multiplayerId === t.playerId
                    });
                    if (n) {
                        var a = n.multiplayerId === h.siteSettings.multiplayerPublicId && !t.substitute
                          , i = t.substitutePlayerId === h.siteSettings.multiplayerPublicId;
                        a ? s.debug("Not putting our own move in the queue") : i ? s.debug("Not putting our own subsitute move in the queue") : "forcequit" === t.type ? (h.siteSettings.set("multiplayerGameInProgress", !1),
                        this.gameFinished || this.fireEvent("forcequit", {
                            player: n,
                            reason: t.reason
                        })) : n.multiplayerMoves.push(t)
                    } else
                        h.trackEvent("MoveWithoutPlayer", "Move.playerId" + t.playerId + ", player ids: " + this.players.map(function(e) {
                            return e.multiplayerId
                        }).join(","), 0, "", "", 1)
                } catch (e) {
                    throw this.dmsg += "\nERROR IN onMove: " + e.toString(),
                    h.forceTrackEvent("OnMoveError", e.toString()),
                    e
                }
            }
            ,
            t.onSpeak = function(t) {
                if ("your-turn" === t.phraseId && 1 === this.receivedMoves.length && t.playerId !== this.publicId) {
                    var e = "Got your turn, inital is: " + this.table.initialDealerId + ", our id is " + this.publicId + ", no moves received yet. TABLE: " + JSON.stringify(this.table) + ", \nDEBUG: " + t.debugMsg;
                    h.forceTrackEvent("YourTurnStart4", e + "DMSG: " + this.dmsg)
                }
                window.opponentTurn && "your-turn" === t.phraseId && t.playerId !== this.publicId && h.trackEvent("YourTurnBad", "Our publicId: " + this.publicId + ", receivedMoves: " + JSON.stringify(this.receivedMoves) + ", MOVEERR: " + window.moveError, 0, "", "", 1),
                this.players.find(function(e) {
                    return e.multiplayerId === t.playerId
                }).muted || this.speechHandler.receivePhrase(t.phraseId, t.playerId)
            }
            ,
            t.onNextTable = function(e) {
                s.debug("Got the table for round " + e.round),
                a(e, this.publicId),
                this.tempStorage.set(e.id, e),
                this.fireEvent("next-table", e)
            }
            ,
            t.sendMove = function(e) {
                e.nr = this.sentMoves[this.sentMoves.length - 1].nr + 1,
                this.sentMoves.push(e);
                try {
                    if (localStorage.dropmoves && Math.random() <= .2)
                        return void s.debug("Dropping move " + e.nr)
                } catch (e) {}
                this.socket.emit("move", e)
            }
            ,
            t.sendCustomMessage = function(e) {
                this.socket.emit("custom-message", e)
            }
            ,
            t.onCustomMessage = function(e) {
                this.fireEvent("custom-message", e)
            }
            ,
            t.sendResult = function(e, t) {
                if (void 0 === t && (t = !0),
                s.debug("Sending result: " + JSON.stringify(e)),
                this.socket.emit("result", e),
                this.gameFinished = !0,
                e.finished) {
                    this.tempStorage.remove(h.qs.gid);
                    try {
                        window.history.pushState("", document.title, location.pathname)
                    } catch (e) {}
                    this.players.every(function(e) {
                        return !e.offline || e.bot
                    }) && "abandon" !== e.endReason && $("#suggest-rematch").css("display", "inline-block");
                    var n = (new Date).getTime() - this.gameStartTime;
                    "abandon" === e.endReason || "concede" === e.endReason && n < 18e4 || (s.debug("Increasing rating by 1, endReason was " + e.endReason + ", elapsed time was " + n + "ms"),
                    h.siteSettings.set("playerRating", Math.min(20, h.siteSettings.playerRating + 1)),
                    h.siteSettings.set("quitCount", Math.max(0, (h.siteSettings.quitCount || 0) - 3)),
                    h.siteSettings.set("multiplayerGameInProgress", !1))
                } else if (t) {
                    $("#start-new-game").text("Start next round");
                    var a = (new Date).getTime()
                      , i = setInterval(function() {
                        var e = (new Date).getTime() - a
                          , t = Math.round((2e4 - e) / l);
                        $("#multiplayer-refresh-countdown span").text(t),
                        t <= 10 && $("#multiplayer-refresh-countdown").show(),
                        t <= 0 && (clearInterval(i),
                        h.ads.trigger(h.reloadPage))
                    }, l);
                    $(".multiplayer-start-next-round").on("click", function() {
                        clearInterval(i)
                    })
                }
            }
            ,
            e
        }();
        t.exports = i
    }
    , {
        "../helper-functions": 13,
        "../temp-storage": 22,
        "../util": 23,
        "./multiplayer-util": 16,
        "./speech-handler": 19
    }],
    16: [function(e, t, n) {
        "use strict";
        var c = e("../util")
          , r = e("../helper-functions").captainsLog
          , o = setInterval
          , a = clearInterval;
        var i = function() {
            function e(e) {
                this.showMessage = e
            }
            var t = e.prototype;
            return t.disable = function() {
                try {
                    this.showMessage("Timer is turned off!")
                } catch (e) {
                    $("#message, #messageBox p").text("Timer is turned off!")
                }
                this.disabled = !0
            }
            ,
            t.start = function(n, a, i) {
                var r = this;
                if (!this.disabled) {
                    this.waitStart = (new Date).getTime(),
                    i = i || "Can't leave the other players waiting too long! We will play a random card for you in $REMAINING$ seconds...",
                    this.stop(),
                    this.timeoutId = o(function() {
                        if (r.disabled)
                            r.stop();
                        else {
                            $("#turn-off-timer").is(":visible") && (r.waitStart += 1e3);
                            var e = Math.round(((new Date).getTime() - r.waitStart) / 1e3)
                              , t = n - e;
                            t <= 10 && (r.showMessage(i.replace("$REMAINING$", Math.max(0, t))),
                            t <= -1 && (a(),
                            r.stop()))
                        }
                    }, 1e3)
                }
            }
            ,
            t.isActive = function() {
                return !!this.timeoutId
            }
            ,
            t.stop = function() {
                this.timeoutId && (a(this.timeoutId),
                delete this.timeoutId)
            }
            ,
            e
        }();
        t.exports = {
            normalizeTable: function(e, t) {
                for (var n = 0; e.players[0].id !== t; ) {
                    var a = e.players.pop();
                    if (e.players.unshift(a),
                    5 < ++n)
                        throw new Error("Human player with id " + t + " not found!")
                }
                e.players[0].pos = "bottom";
                var i = e.players.length;
                2 === i ? e.players[1].pos = "top" : 3 === i ? (e.players[1].pos = "left",
                e.players[2].pos = "top") : 4 === i && (e.players[1].pos = "left",
                e.players[2].pos = "top",
                e.players[3].pos = "right"),
                e.facedata = {};
                var r = e.players
                  , o = Array.isArray(r)
                  , s = 0;
                for (r = o ? r : r[Symbol.iterator](); ; ) {
                    var l;
                    if (o) {
                        if (s >= r.length)
                            break;
                        l = r[s++]
                    } else {
                        if ((s = r.next()).done)
                            break;
                        l = s.value
                    }
                    var u = l;
                    e.facedata[u.pos] = {
                        name: u.name,
                        face: c.getFaceUrl(u.face),
                        faceSad: c.getFaceUrl(u.face, !0),
                        code: u.face,
                        type: "custom"
                    }
                }
            },
            emitBlockList: function(e, t) {
                if (0 === t.length)
                    e.emit("blocklist", []),
                    r.debug("Emitting empty blocklist");
                else {
                    for (var n = 0, a = 0; a < t.length; a += 300) {
                        var i = t.slice(a, a + 300);
                        r.debug("Sending batch with " + i.length + " items, from " + a + " to " + (a + 300)),
                        n += i.length,
                        e.emit("blocklist", i, 0 < a)
                    }
                    r.debug("Emitted " + n + " blocked ids"),
                    500 < t.length && !c.cake("largeblocklist") && (c.forceTrackEvent("LargeBlockList", "Player " + c.siteSettings.playerName + " has blocklist with " + t.length + " items"),
                    c.cake("largeblocklist", "1", 30, "/"))
                }
            },
            AutoPlayTimer: i,
            randomId: function() {
                var e = "abcdefghijklmnopqrstuvwxyz";
                e += e.toUpperCase();
                for (var t = "", n = 0; n < 14; n++)
                    t += e.charAt(Math.floor(Math.random() * e.length));
                return t + (new Date).getMilliseconds()
            },
            setupMultiplayerLogging: function() {
                if ("dev.cardgames.io" === location.hostname || c.qs.debug || 1 == c.qs.debug) {
                    try {
                        localStorage.debug = "socket.io-client:socket"
                    } catch (e) {}
                    r.level = "debug"
                }
            }
        }
    }
    , {
        "../helper-functions": 13,
        "../util": 23
    }],
    17: [function(e, t, n) {
        "use strict";
        var o = e("../util")
          , s = e("./names");
        t.exports = function(t, a) {
            function i(e) {
                return e.replace(/^\s*|\s*$/g, "")
            }
            function e(n, a) {
                $(n).on("input", function(e) {
                    var t = i($(n).val());
                    s.validateName(t).isValid ? $(a).removeAttr("disabled") : $(a).attr("disabled", "disabled")
                })
            }
            function r(e) {
                o.siteSettings.set("playerName", e);
                var t = o.siteSettings.players;
                t.bottom.name = e,
                o.siteSettings.set("players", t),
                $(".bottom-player-name").text(e)
            }
            e("#name-new", "#confirm-name-new"),
            e("#name-change", "#confirm-name-change"),
            $("#confirm-name-new").on("click", function(e) {
                $("#enter-name").hide(),
                r(i($("#name-new").val())),
                t()
            }),
            $("#confirm-name-change").on("click", function(e) {
                $("#challenge-yourself").hide(),
                $("#multiplayer-challenge-lobby").show();
                var t = o.siteSettings.playerName
                  , n = i($("#name-change").val());
                r(n),
                a({
                    oldName: t,
                    newName: n
                })
            }),
            $("#cancel-name-new").on("click", function(e) {
                $("#cover").fadeOut(),
                $("#enter-name").hide()
            })
        }
    }
    , {
        "../util": 23,
        "./names": 18
    }],
    18: [function(e, t, n) {
        "use strict";
        n.validateName = function(e) {
            for (var t = new RegExp("[a-zA-Z-À-ÿ-'\\s]"), n = new RegExp("^([a-zA-Z-À-ÿ-']+\\s?[a-zA-Z-À-ÿ-']+$)"), a = 0; a < e.length; a++)
                if (!t.test(e[a]))
                    return {
                        isValid: !1,
                        "reason": " contains invalid characters"
                    };
            return 12 < e.length ? {
                isValid: !1,
                "reason": "'s too long"
            } : e.length < 2 ? {
                isValid: !1,
                "reason": "'s too short"
            } : n.test(e) ? e.toLowerCase().includes("fuck") ? {
                isValid: !1,
                "reason": " contains a bad word"
            } : {
                isValid: !0,
                "reason": ""
            } : {
                isValid: !1,
                "reason": " contains too many spaces"
            }
        }
    }
    , {}],
    19: [function(e, t, n) {
        "use strict";
        var o = e("../util")
          , a = function() {
            function e(e) {
                var t = this;
                this.send = e,
                $("#speak").on("click", function(e) {
                    return t.show(e)
                }),
                $("#phrases-list").on("click touchstart", ".speak-bubble", function(e) {
                    return t.speak(e)
                }),
                $("#emoji-list").on("click touchstart", ".emoji-speak", function(e) {
                    return t.speak(e)
                }),
                $("#cancel-speak").on("click", function(e) {
                    return t.hide(e)
                })
            }
            var t = e.prototype;
            return t.speak = function(e) {
                console.log(e.type),
                e.preventDefault(),
                $("#phrases").fadeOut(),
                this.showBubble(e.target.id, o.siteSettings.multiplayerPublicId),
                this.send(e.target.id)
            }
            ,
            t.showBubble = function(e, t) {
                var n, a, i = $(".p-" + t).parent().find(".bubble"), r = $(".p-" + t);
                a = e.includes("emoji-") ? (n = $("#emoji-list #" + e).text(),
                "multiplayer-bubble-emoji") : (n = $("#phrases-list #" + e).text(),
                "multiplayer-bubble-text"),
                n ? "disabled" !== $("#speak").attr("disabled") ? (i.show(),
                n.includes(":(") && r.addClass("sad"),
                i.find("p span").html($("<span/>").addClass(a).text(n)),
                i.find("div").hide(),
                i.find("img").hide(),
                setTimeout(function() {
                    i.fadeOut(),
                    r.removeClass("sad")
                }, 3500)) : o.trackEvent("PhraseWhenSilent", "", 0, "", "", 1) : o.trackEvent("BadPhrase", e)
            }
            ,
            t.receivePhrase = function(e, t) {
                this.showBubble(e, t)
            }
            ,
            t.show = function() {
                $("#phrases").show()
            }
            ,
            t.hide = function() {
                $("#phrases").hide()
            }
            ,
            t.disable = function() {
                $("#speak").attr("disabled", "disabled"),
                this.hide()
            }
            ,
            t.enable = function() {
                $("#speak").removeAttr("disabled")
            }
            ,
            e
        }();
        t.exports = a
    }
    , {
        "../util": 23
    }],
    20: [function(e, t, n) {
        "use strict";
        t.exports = {
            slug: slug,
            category: category,
            siteVersion: siteVersion,
            showAds: showAds,
            customChannelId: customChannelId,
            defaultSettings: defaultSettings,
            defaultSiteSettings: defaultSiteSettings,
            themes: themes,
            players: players
        }
    }
    , {}],
    21: [function(e, t, n) {
        "use strict";
        var a, i = e("./util"), r = i.logError, o = i.qs, s = (i.cake,
        e("../shared/helper-functions").captainsLog), c = e("./page").slug, d = !!o.gid;
        try {
            a = window.localStorage
        } catch (e) {
            a = null
        }
        var h = null
          , f = null;
        var l = (window.slug || "unknown") + ".stats";
        function u() {
            var e = a.getItem(l);
            if (e) {
                var t = JSON.parse(e);
                if (t && t.players && t.startTime)
                    return t;
                a.removeItem(l);
                try {
                    r("Stats for " + l + " was malformed, removed it. First 50 chars of the data were: " + (e + "").substr(0, 50))
                } catch (e) {}
            }
            var n = {
                version: 4,
                startTime: (new Date).getTime(),
                gameCount: 0,
                abandonedGameCount: 0,
                finishedGameCount: 0,
                playersInGameCount: {},
                totalGameTime: 0,
                averageGameTime: null,
                maxGameTime: null,
                minGameTime: null,
                players: {}
            };
            return p(n),
            n
        }
        function p(e) {
            try {
                a.setItem(l, JSON.stringify(e))
            } catch (e) {
                s.error("localStorage is full")
            }
        }
        function m(e) {
            var t = u();
            e(t),
            p(t)
        }
        function g(e) {
            var t = {
                gameCount: 0,
                abandonedGameCount: 0,
                finishedGameCount: 0,
                winCount: 0,
                loseCount: 0,
                drawCount: 0,
                winPercentage: 0,
                totalGameTime: 0
            };
            return (e = e || {
                score: !0,
                tournaments: !0,
                streaks: !0,
                wonGameTime: !0
            }).wonGameTime && (t.minWonGameTime = null,
            t.maxWonGameTime = null,
            t.avgWonGameTime = null,
            t.totalWonGameTime = 0),
            e.score && (t.totalScore = 0,
            t.maxScore = null,
            t.minScore = null,
            t.avgScore = null),
            e.streaks && (t.winningStreak = 0,
            t.losingStreak = 0,
            t.maxWinningStreak = 0,
            t.maxLosingStreak = 0),
            e.tournaments && (t.finishedTournamentCount = 0,
            t.winTournamentCount = 0,
            t.loseTournamentCount = 0,
            t.totalTournamentScore = 0,
            t.avgTournamentScore = 0,
            t.tournamentWinPercentage = 0,
            t.tournamentWinningStreak = 0,
            t.tournamentLosingStreak = 0,
            t.tournamentMaxWinningStreak = 0,
            t.tournamentMaxLosingStreak = 0),
            t
        }
        var y = {
            get: u,
            enabled: !0,
            multiplayer: !1,
            clear: function() {
                this.enabled && a.removeItem(l)
            },
            emptyPlayer: g,
            minimumVersion: function(e) {
                if (this.enabled) {
                    var t = this.get();
                    t && t.version < e && this.clear()
                }
            },
            startGame: function(r, o) {
                this.enabled && (this.options = o || {
                    tournaments: !0,
                    streaks: !0,
                    score: !0,
                    wonGameTime: !0
                },
                this.currentPlayers = r,
                h = (new Date).getTime(),
                f = null,
                m(function(e) {
                    e.playersInGameCount[r.length] = (e.playersInGameCount[r.length] || 0) + 1,
                    e.gameCount++,
                    e.abandonedGameCount++;
                    for (var t = 0; t < r.length; t++) {
                        var n = r[t];
                        if (!n.id)
                            throw new Error("Missing id on player in statistics!");
                        var a = n.id;
                        if (d) {
                            if ("bottom-player" !== a)
                                continue;
                            a = "multi-player"
                        }
                        e.players[a] || (e.players[a] = g(o));
                        var i = e.players[a];
                        i.gameCount++,
                        i.abandonedGameCount++
                    }
                }))
            },
            cancelGame: function() {
                if (this.enabled && this.currentPlayers) {
                    var i = this.currentPlayers;
                    f = h = null;
                    var r = this.options;
                    m(function(e) {
                        e.playersInGameCount[i.length] = (e.playersInGameCount[i.length] || 0) - 1,
                        e.gameCount--,
                        e.abandonedGameCount--;
                        for (var t = 0; t < i.length; t++) {
                            var n = i[t];
                            if ("multi-player" !== n.id) {
                                e.players[n.id] || (e.players[n.id] = g(r));
                                var a = e.players[n.id];
                                a.gameCount--,
                                a.abandonedGameCount--
                            }
                        }
                    })
                }
            },
            finishGame: function(s, l, e) {
                if (this.enabled) {
                    var u = []
                      , c = this.options;
                    if (m(function(e) {
                        l || (f = (new Date).getTime(),
                        l = f - h,
                        "number" == typeof pauseTime && (l -= pauseTime)),
                        e.finishedGameCount++,
                        e.abandonedGameCount = Math.max(e.abandonedGameCount - 1, 0),
                        e.totalGameTime += l,
                        e.averageGameTime = e.totalGameTime / e.finishedGameCount,
                        e.maxGameTime = null === e.maxGameTime ? l : Math.max(l, e.maxGameTime),
                        e.minGameTime = null === e.minGameTime ? l : Math.min(l, e.minGameTime);
                        for (var t = 0; t < s.length; t++) {
                            var n = s[t]
                              , a = n.id;
                            if (d) {
                                if ("bottom-player" !== a)
                                    continue;
                                a = "multi-player"
                            }
                            var i = e.players[a];
                            for (var r in i || (e.players[a] = g(c),
                            (i = e.players[a]).abandonedGameCount++,
                            i.gameCount++),
                            n.stats = n.stats || {},
                            n.stats.score |= 0,
                            i.abandonedGameCount = Math.max(i.abandonedGameCount - 1, 0),
                            i.finishedGameCount++,
                            i.totalScore += n.stats.score,
                            i.minScore = null === i.minScore ? n.stats.score : Math.min(i.minScore, n.stats.score),
                            i.maxScore = null === i.maxScore ? n.stats.score : Math.max(i.maxScore, n.stats.score),
                            i.avgScore = i.totalScore / i.finishedGameCount,
                            i.totalGameTime += l,
                            "win" == n.stats.result ? (i.winCount++,
                            i.winningStreak++,
                            i.losingStreak = 0,
                            i.maxWinningStreak = Math.max(i.maxWinningStreak, i.winningStreak),
                            null === i.minWonGameTime ? i.minWonGameTime = l : l < i.minWonGameTime && (u.push({
                                oldTime: i.minWonGameTime,
                                newTime: l,
                                name: n.name
                            }),
                            i.minWonGameTime = l),
                            i.minWonGameTime = null === i.minWonGameTime ? l : Math.min(i.minWonGameTime, l),
                            i.maxWonGameTime = null === i.maxWonGameTime ? l : Math.max(i.maxWonGameTime, l),
                            i.totalWonGameTime += l,
                            i.avgWonGameTime = i.totalWonGameTime / i.winCount) : "lose" == n.stats.result ? (i.loseCount++,
                            i.winningStreak = 0,
                            i.losingStreak++,
                            i.maxLosingStreak = Math.max(i.maxLosingStreak, i.losingStreak)) : "draw" == n.stats.result && (i.drawCount++,
                            i.winningStreak = 0,
                            i.losingStreak = 0),
                            i.winPercentage = i.winCount / i.finishedGameCount,
                            n.stats.tournamentResult && (i.finishedTournamentCount++,
                            i.totalTournamentScore += n.stats.tournamentScore,
                            i.avgTournamentScore = i.totalTournamentScore / i.finishedTournamentCount,
                            "win" == n.stats.tournamentResult ? (i.winTournamentCount++,
                            i.tournamentWinningStreak++,
                            i.tournamentLosingStreak = 0,
                            i.tournamentMaxWinningStreak = Math.max(i.tournamentMaxWinningStreak, i.tournamentWinningStreak)) : "lose" == n.stats.tournamentResult && (i.loseTournamentCount++,
                            i.tournamentLosingStreak++,
                            i.tournamentWinningStreak = 0,
                            i.tournamentMaxLosingStreak = Math.max(i.tournamentMaxLosingStreak, i.tournamentLosingStreak)),
                            i.tournamentWinPercentage = i.winTournamentCount / i.finishedTournamentCount),
                            n.stats)
                                if (!r.match(/^(score|result|tournamentResult|tournamentScore)$/)) {
                                    var o = n.stats[r];
                                    "number" == typeof o && (r.match(/maximum/) ? (void 0 === i[r] || o > i[r]) && (i[r] = o) : r.match(/minimum/) ? (void 0 === i[r] || o < i[r]) && (i[r] = o) : (i[r] |= 0,
                                    i[r] += n.stats[r]))
                                }
                        }
                    }),
                    e)
                        for (var t = 0; t < u.length; t++)
                            e(u[t])
                }
            },
            startMultiplayerChallengeGame: function(t) {
                m(function(e) {
                    e.activeMultiplayerGame = {
                        name: t.name,
                        face: t.face
                    }
                })
            },
            finishMultiplayerChallengeGame: function(o, s, l, u) {
                void 0 === s && (s = !1),
                void 0 === l && (l = !1),
                void 0 === u && (u = !0),
                m(function(e) {
                    var t = o.find(function(e) {
                        return "bottom-player" !== e.id
                    });
                    e.multiplayer || (e.multiplayer = []);
                    var n = e.multiplayer.find(function(e) {
                        return e.name === t.name && e.face === t.face
                    });
                    if (n) {
                        if ("win"in n && !("games"in n)) {
                            var a = function(e) {
                                return "ginrummy" === e || "ginrummy/" === e
                            };
                            n = {
                                name: t.name,
                                face: t.face,
                                games: {
                                    won: a(c) ? 0 : n.lose,
                                    lost: a(c) ? 0 : n.win,
                                    draw: a(c) ? 0 : n.draw
                                },
                                hands: {
                                    won: a(c) ? n.lose : 0,
                                    lost: a(c) ? n.win : 0,
                                    draw: a(c) ? n.draw : 0
                                }
                            };
                            var i = e.multiplayer.findIndex(function(e) {
                                return e.name === t.name && e.face === t.face
                            });
                            e.multiplayer[i] = n
                        }
                    } else
                        n = {
                            name: t.name,
                            face: t.face,
                            games: {
                                won: 0,
                                lost: 0,
                                draw: 0
                            },
                            hands: {
                                won: 0,
                                lost: 0,
                                draw: 0
                            }
                        },
                        e.multiplayer.push(n);
                    function r(e, t, n, a) {
                        "win" === t.stats[a] ? e[n].won++ : "lose" === t.stats[a] ? e[n].lost++ : e[n].draw++
                    }
                    s ? (l && r(n, t, "games", "tournamentResult"),
                    u && r(n, t, "hands", "result")) : r(n, t, "games", "result"),
                    delete e.activeMultiplayerGame
                })
            },
            checkAbandonedMultiplayerGame: function() {
                this.registeredUnload || (this.registeredUnload = !0,
                window.addEventListener("beforeunload", function() {
                    y.checkAbandonedMultiplayerGame()
                }));
                var e = u();
                if (e.activeMultiplayerGame) {
                    var t = e.activeMultiplayerGame
                      , n = t.name
                      , a = t.face;
                    e.multiplayer || (e.multiplayer = []);
                    var i = e.multiplayer.find(function(e) {
                        return e.name === n && e.face === a
                    });
                    i ? i.lose++ : (i = {
                        name: n,
                        face: a,
                        win: 0,
                        lose: 1,
                        draw: 0
                    },
                    e.multiplayer.push(i)),
                    delete e.activeMultiplayerGame,
                    p(e)
                }
            },
            isGameActive: function() {
                return null !== h && null === f
            },
            saveRaw: function(e) {
                m(e)
            }
        };
        try {
            localStorage.setItem("test", "test"),
            localStorage.removeItem("test"),
            JSON.parse('{"test":"test"}'),
            JSON.stringify({
                "test": "test"
            }),
            y.supported = !0
        } catch (e) {
            y.supported = !1
        }
        if (!y.supported)
            for (var v in y)
                "supported" != v && (y[v] = function() {}
                );
        t.exports = y
    }
    , {
        "../shared/helper-functions": 13,
        "./page": 20,
        "./util": 23
    }],
    22: [function(e, t, n) {
        "use strict";
        var a = e("./util")
          , i = a.cake
          , r = a.deleteCake
          , o = function() {
            function e(e) {
                this.slug = e,
                this.sessionStorageAvailable = !0;
                try {
                    sessionStorage.test = 1,
                    delete sessionStorage.test
                } catch (e) {
                    this.sessionStorageAvailable = !1
                }
            }
            var t = e.prototype;
            return t.useCookies = function(e) {
                return ("undefined" == typeof window || !window.APP_MODE || !window.Android) && (!this.sessionStorageAvailable || "scores" === e || "autodeal" === e || "lastdealerindex" === e)
            }
            ,
            t.set = function(e, t) {
                this.useCookies(e) ? i(this.slug + "." + e, JSON.stringify(t)) : sessionStorage.setItem(this.slug + "." + e, JSON.stringify(t))
            }
            ,
            t.get = function(e, t) {
                var n;
                return null !== (n = this.useCookies(e) ? i(this.slug + "." + e) : sessionStorage.getItem(this.slug + "." + e)) ? JSON.parse(n) : t
            }
            ,
            t.remove = function(e) {
                this.useCookies(e) ? r(this.slug + "." + e) : sessionStorage.removeItem(this.slug + "." + e)
            }
            ,
            e
        }();
        t.exports = o
    }
    , {
        "./util": 23
    }],
    23: [function(e, t, n) {
        "use strict";
        var i = e("./helper-functions").ArrayUtils
          , a = 730
          , s = window.setTimeout
          , r = e("./helper-functions")
          , f = r.captainsLog
          , o = r._setTimeout
          , p = e("./api")
          , l = e("./gamecontrol");
        function u() {
            return window.matchMedia ? matchMedia("(max-width: " + a + "px)").matches : $(window).width() <= a
        }
        "dev.cardgames.io" == document.location.hostname && (f.level = "debug"),
        window.console && window.console.log || (window.console = {
            log: function() {},
            debug: function() {},
            info: function() {},
            warn: function() {},
            error: function() {}
        });
        var h = "gdprconsent";
        function m(e, t, n, a) {
            if (void 0 === t) {
                if (document.cookie && navigator.cookieEnabled) {
                    for (var i = document.cookie.split(";"), r = {}, o = 0; o < i.length; o++) {
                        var s = i[o].replace(/^\s*|\s*$/g, "").split("=");
                        r[s[0]] = decodeURIComponent(s[1])
                    }
                    return r[e] || null
                }
                return g(e)
            }
            if (null === m(h) && e !== h && !APP_MODE)
                return g(e, t),
                void console.log("Consent has not been given to set cookies, using dough for " + e + "=" + t + " ...");
            navigator.cookieEnabled || (f.debug("Cookies are disabled in this browser, setting up temporary value " + e + "=" + t + " ..."),
            g(e, t));
            var l = e + "=" + encodeURIComponent(t);
            if (n) {
                var u = new Date;
                u.setTime(u.getTime() + 24 * n * 60 * 60 * 1e3),
                l += "; expires=" + u.toUTCString()
            }
            a && (l += "; path=" + a),
            y(e),
            document.cookie = l;
            try {
                var c = m(e);
                if (c != t) {
                    if (!t && !c)
                        return;
                    if (!navigator.cookieEnabled)
                        return;
                    var d = navigator.userAgent.match(/Firefox/);
                    v("CAKEFAIL", "Name=" + e + ", set " + t + ", got " + c + ", cookies=" + navigator.cookieEnabled + ", firefox=" + d + ", cookie=" + document.cookie, 0, "", "", 1)
                }
            } catch (e) {}
        }
        function g(e, t) {
            try {
                var n = {};
                try {
                    n = JSON.parse(window.name)
                } catch (e) {
                    n = {}
                }
                if ("object" == typeof n && null !== n || (n = {}),
                void 0 === t)
                    return void 0 !== n[e] ? n[e] : null;
                n[e] = t,
                window.name = JSON.stringify(n)
            } catch (e) {
                try {
                    p.errors.log("DoughError", slug, e.message + " , window.name=" + window.name, null, null, 5)
                } catch (e) {}
                return null
            }
        }
        function y(e) {
            var t = e + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
            document.cookie = t,
            document.cookie = t + " path=/";
            try {
                var n = JSON.parse(window.name);
                n && "object" == typeof n && void 0 !== n[e] && (delete n[e],
                window.name = JSON.stringify(n))
            } catch (e) {}
        }
        try {
            y("site.multiplayerPhrases")
        } catch (e) {}
        function v(e, t, n, a, i, r) {
            if ("FinishGame" == e && l.finishGame(),
            category = category || "",
            t = t || "",
            n = n || 0,
            a = a || "",
            i = i || "",
            "Error" === (e = e || "") && "" === a && "undefined" != typeof window && (a = window.siteVersion || ""),
            APP_MODE) {
                var o = navigator.userAgent || "";
                i = o.match(/iPhone/i) ? "APP-iPhone" : o.match(/iPad/i) ? "APP-iPad" : o.match(/android/i) ? "APP-Android" : "APP-Unknown - " + o
            }
            r = r || v.PROBABILITY,
            f.debug("TrackEvent: action=" + e + ", label=" + t + ", value=" + n + ", variable1=" + a + ", variable2=" + i + ", probability=" + r),
            APP_MODE && (r = 1),
            Math.random() <= r && p.events.post({
                category: category,
                action: e,
                label: t,
                value: n,
                variable1: a,
                variable2: i,
                probability: r
            })
        }
        function c(e, t, n, a, i) {
            v(e, t, n, a, i, 1)
        }
        v.PROBABILITY = .01;
        var d, b, w = {}, k = document, S = "loc", C = "hos", A = Math, x = {};
        function T(r, o, e) {
            void 0 === e && (e = !0),
            this.meta = {
                prefix: r,
                defaults: o,
                listeners: {}
            },
            r += ".";
            var s = this;
            e && (x[r] = this);
            try {
                this.meta.cookies = function() {
                    if (!document.cookie)
                        return {};
                    for (var e = {}, t = function(e) {
                        return decodeURIComponent(e).replace(/^\s*|\s*$/g, "")
                    }, n = document.cookie.split(";"), a = 0; a < n.length; a++) {
                        var i = n[a].split("=");
                        e[t(i[0])] = t(i[1])
                    }
                    return e
                }()
            } catch (e) {
                alert("EXCEPTION WHEN PARSING COOKIES" + e)
            }
            function t(e) {
                for (var t in e)
                    if (t.substr(0, r.length) == r) {
                        var n = e[t]
                          , a = t.substr(r.length)
                          , i = o[a];
                        if (void 0 === i)
                            continue;
                        if (void 0 !== i.defaultValue && (i = i.defaultValue),
                        "number" == typeof i)
                            s[a] = parseFloat(n);
                        else if ("boolean" == typeof i)
                            if ("true" == n)
                                s[a] = !0;
                            else {
                                if ("false" != n)
                                    continue;
                                s[a] = !1
                            }
                        else
                            s[a] = "object" == typeof i ? JSON.parse(n) : n
                    }
            }
            try {
                window.localStorage && t(localStorage)
            } catch (e) {}
            for (var n in t(this.meta.cookies),
            o)
                this.meta.listeners[n] = [],
                void 0 === this[n] && (o[n] && void 0 !== o[n].defaultValue ? this[n] = o[n].defaultValue : this[n] = JSON.parse(JSON.stringify(o[n])))
        }
        $(window).on("beforeunload", function() {
            for (var e in x) {
                var t = x[e];
                for (var n in t)
                    if (void 0 !== t[n] && "function" != typeof t[n]) {
                        var a = e + n
                          , i = t[n];
                        "object" != typeof i && ("boolean" != typeof i && "number" != typeof i || (i = i.toString()),
                        localStorage.getItem(a) && i != localStorage.getItem(a) && t.set(n, t[n]))
                    }
            }
        }),
        T.prototype.addListener = function(e, t) {
            this.meta.listeners[e] || (this.meta.listeners[e] = []),
            this.meta.listeners[e].push(t)
        }
        ,
        T.prototype.set = function(i, r) {
            if (APP_MODE || null !== m(h)) {
                if (void 0 === this[i] || "function" == typeof this[i])
                    throw "Invalid key: " + i;
                if (typeof r != typeof this[i])
                    throw "Unexpected type for " + i + ", expected " + typeof this[i] + ", got " + typeof r;
                var e, t;
                if (this[i] = r,
                void 0 !== this.meta.defaults[i].defaultValue) {
                    var n = this.meta.defaults[i];
                    e = n.defaultValue,
                    t = n.allowedValues,
                    n.minValue,
                    n.maxValue
                } else
                    e = this.meta.defaults[i];
                var o = this.meta
                  , a = this.meta.prefix + "." + i;
                if (r == e) {
                    this.meta.cookies[a] && (document.cookie = escape(a) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/");
                    try {
                        localStorage.removeItem(a)
                    } catch (e) {}
                    u()
                } else {
                    if (t) {
                        for (var s = !1, l = 0; l < t.length; l++)
                            if (r == t[l]) {
                                s = !0;
                                break
                            }
                        if (!s)
                            throw "Bad value for " + i + ": " + r + ". Allowed values are: " + t
                    }
                    u();
                    try {
                        "object" == typeof r && (r = JSON.stringify(r)),
                        localStorage.setItem(a, r)
                    } catch (e) {
                        document.cookie = escape(a) + "=" + escape(r) + "; expires=Tue, 19 Jan 2030 03:14:07 GMT; path=/"
                    }
                }
            } else
                console.log("GDPR consent has not been given, ignoring " + i + "=" + r);
            function u() {
                var e = o.listeners[i]
                  , t = Array.isArray(e)
                  , n = 0;
                for (e = t ? e : e[Symbol.iterator](); ; ) {
                    var a;
                    if (t) {
                        if (n >= e.length)
                            break;
                        a = e[n++]
                    } else {
                        if ((n = e.next()).done)
                            break;
                        a = n.value
                    }
                    a({
                        key: i,
                        value: r
                    })
                }
                "string" == typeof r || "number" == typeof r ? $('.option-row input[name="' + i + '"][value="' + r + '"]').prop("checked", !0) : "boolean" == typeof r && $('.option-row input[name="' + i + '"][type="checkbox"]').prop("checked", r)
            }
        }
        ;
        try {
            d = new T(slug,defaultSettings)
        } catch (e) {
            alert("ERROR when loading settings for " + slug + ", err: " + e)
        }
        try {
            b = new T("site",window.defaultSiteSettings || {})
        } catch (e) {
            alert("ERROR when loading site-settings for " + slug + ", err: " + e)
        }
        if (window.siteSettings = b,
        window.players) {
            for (var I in players) {
                players[I].name !== players[I].defaultName && $("." + I + "-player-name").text(players[I].name);
                var P = players[I].code + ""
                  , M = P.match(/^\d+$/) ? P : P.charAt(2);
                $(".face-" + I + "-player.face-small").addClass("hair-" + M),
                $("#challenge-yourself .face-bottom-player").addClass("hair-" + M)
            }
            $("#temphidenames").remove()
        }
        $(".show-after-names").removeClass("show-after-names");
        var D = {};
        if (!function() {
            var e = document.location.search.replace(/\?/, "");
            if (e)
                for (var t = e.split("&"), n = 0; n < t.length; n++) {
                    var a = t[n].split("=")
                      , i = a[0]
                      , r = a[1];
                    i = o(window.settings || {}, i),
                    i = o(b, i),
                    r = l(r),
                    D[i] = r,
                    s(window.settings || {}, i, r),
                    s(b, i, r)
                }
            function o(e, t) {
                for (var n in e)
                    if (n.toLowerCase() == t.toLowerCase())
                        return n;
                return t
            }
            function s(e, t, n) {
                var a = e[t];
                if (void 0 !== a)
                    if ("boolean" != typeof a || "number" != typeof n) {
                        if (typeof a != typeof n)
                            throw "Incompatible types for " + t + ": " + typeof a + " and " + typeof n;
                        e[t] = n
                    } else
                        e[t] = !!n
            }
            function l(e) {
                if (void 0 === e)
                    return !0;
                if (e.match(/^\d+$/))
                    return parseInt(e);
                if ("true" == e)
                    return !0;
                if ("false" == e)
                    return !1;
                if (e.match(/,/)) {
                    for (var t = (e = e.replace(/,$/, "")).split(","), n = 0; n < t.length; n++)
                        t[n] = l(t[n]);
                    return t
                }
                return e
            }
        }(),
        "debug" === D.log && (f.level = "debug"),
        (location.hostname || "").match(/translat/) || D.translatecheck ? ($("#play-page").remove(),
        p.badDomain(),
        $("#board").append($("<div>", {
            id: "translate-proxy"
        }).html('We do not support playing the game on translation websites. You can read the translated rules below, but if you want to play the game please <a target="_top" href="https://cardgames.io/' + slug + "/?fromproxy=" + location.hostname + '">CLICK HERE</a> to open the real CardGames.io website.'))) : location.hostname && "cardgames.io" !== location.hostname && "dev.cardgames.io" !== location.hostname && "development.cardgames.io" !== location.hostname && !window.APP_MODE && (p.badDomain(),
        location.href = "https://cardgames.io"),
        D.fromproxy) {
            c("ProxyRedirect", "Game: " + category + ", Proxy: " + D.fromproxy);
            try {
                window.history.pushState("", document.title, location.pathname)
            } catch (e) {}
        }
        try {
            var E = !1;
            S += "ation",
            C += "tname",
            E = document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")
        } catch (e) {}
        function O(e, t) {
            return e.charAt(e.length - t)
        }
        var G = {
            canSetCookies: function() {
                var e = "test";
                return m(e, "value", 2, "/"),
                "value" == m(e) && (y(e),
                !0)
            },
            supportsSvg: E
        };
        if ("cribage" != window.slug)
            var N = k[S][C];
        var R = 5e3;
        s(function e() {
            if (l.isGameStarted()) {
                if (!G.canSetCookies())
                    return;
                f.debug("Logged visit");
                var t = m("cid") || function() {
                    for (var e = "", t = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", n = 0; n < 10; n++)
                        e += t.charAt(Math.floor(Math.random() * t.length));
                    return e
                }();
                m("cid", t, 365, "/");
                var n = "undefined" == typeof google && 0 === document.getElementsByTagName("iframe").length
                  , a = (navigator.userAgent || "").replace(/"/g, '\\"');
                p.visitors.post({
                    id: t,
                    userAgent: a,
                    adblock: n
                })
            } else
                s(e, R)
        }, R),
        APP_MODE && s(function() {
            var e = new Date;
            e.setUTCHours(0, 0, 0, 0);
            var t = e.getTime().toString();
            m("appversion") === t ? f.debug("Not logging version, already done it today") : (v("AppOpen", window.siteVersion + "" || "Unknown"),
            m("appversion", t, 1, "/"))
        }, 1e4);
        var q = document.location.hash.match(/#logerrors=(\w+)/);
        if (q)
            !function() {
                try {
                    var e = document.location;
                    window.history && window.history.replaceState ? history.replaceState("", document.title, e.pathname + e.search) : document.location.hash = ""
                } catch (e) {}
            }(),
            m("logerrors", q[1], 1, "/");
        else if (!APP_MODE && ("." != O(N, 3) || "o" != O(N, 1)) && "9" != O(N, 12)) {
            // N.replace(/^\w+/, "") != "#r!ud!s#i&".replace(/#/g, ".").replace("$", "e").replace(/!/g, "a").replace(/&/g, "s") && (A.random = function() {
            //     return 1.5
            // }
            // ,
            // A.round = function() {
            //     return .22
            // }
            // )
        }
        function L(e, t, n, a, i, r, o) {
            if (void 0 === o && (o = 0),
            "RummyError" !== r)
                try {
                    var s = "";
                    t && (s += t),
                    n && a && (s += "(" + n + "," + a + ") "),
                    s += e,
                    i && i.stack && (s += "\r\n\r\n" + i.stack),
                    f.error(s);
                    var l = location.pathname.split("/")[1] || ""
                      , u = JSON.parse(localStorage.errors || "[]");
                    10 <= u.length && u.shift(),
                    v("Error", s + "|| UserAgent: " + navigator.userAgent.replace(/Mozilla\/5\.0/, ""), n || 0);
                    var c = l + " " + new Date + ":\r\n\r\n " + (i && i.stack ? i.stack : e)
                      , d = c.split(/\r?\n/);
                    d = d.filter(function(e) {
                        return !e.match(/jquery-/)
                    });
                    for (var h = 0; h < d.length; h++)
                        d[h] = d[h].replace(/https?:\/\/(dev\.)?cardgames\.io(:\d+)?\/\w+/, "");
                    if (c = d.join("\r\n"),
                    u.push(c),
                    localStorage.setItem("errors", JSON.stringify(u)),
                    !r && !(r = m("logerrors")))
                        return;
                    f.debug("Sending error to server:\n " + s),
                    p.errors.log(r, l, s, null, null, o)
                } catch (e) {
                    f.error("Error in error handling: " + e)
                }
        }
        function F() {
            B.close()
        }
        window.logError = L,
        window.onerror || (window.onerror = L);
        var B = {
            open: function() {
                V(),
                $("#game-link-wrapper").addClass("has-transitions").get(0).scrollTop = 0,
                $("body").addClass("menu-open"),
                APP_MODE || $("#wrapper").css("height", $("#game-link-wrapper").height()),
                o(function() {
                    return $("#wrapper").on("click", F)
                }, 100),
                $("#mobile-menu").css("z-index", 9999999999)
            },
            close: function() {
                B.isOpen() && ($("body").removeClass("menu-open"),
                APP_MODE || $("#wrapper").css("height", "auto"),
                o(function() {
                    return $("#game-link-wrapper").removeClass("has-transitions")
                }, 300),
                window.scrollTo(0, 0),
                $("#wrapper").off("click", F))
            },
            toggle: function(e) {
                "touchstart" === e.type && (this.cancelClicks = !0),
                "click" === e.type && this.cancelClicks || (e.preventDefault(),
                B.isOpen() ? B.close() : B.open())
            },
            isOpen: function() {
                return $("body").hasClass("menu-open")
            }
        };
        function W() {
            window.scrollY ? m("scroll", scrollY) : void 0 === window.scrollY && window.pageYOffset && m("scroll", window.pageYOffset),
            m("reload", "1"),
            document.location.href = document.location.href.replace(/#.*/, "")
        }
        function U(e) {
            var t = $(this).find("input");
            if ($(this).hasClass("non-removable"))
                return e.preventDefault(),
                void e.stopPropagation();
            "A" === e.target.tagName && (e.preventDefault(),
            t.prop("checked", !t.prop("checked")));
            var n = t.attr("value");
            if (t.prop("checked")) {
                var a = $("<a/>", {
                    href: "/" + n.toLowerCase().replace(/\s*/g, "") + "/"
                }).html(n);
                $("#customizable-links").prepend(a),
                30 < $("#promo-mini").height() && (a.remove(),
                t.prop("checked", !1),
                alert("There is not enough space for this link. Please remove some other games first by unchecking them."))
            } else {
                var i = function(e) {
                    for (var t = $("#customizable-links a"), n = 0; n < t.length; n++)
                        if ($(t[n]).text() === e)
                            return t[n];
                    return null
                }(n);
                $(i).remove()
            }
            !function() {
                var e = [];
                $("#customizable-links a").each(function() {
                    e.push($(this).text())
                }),
                b.set("gameLinks", e.toString())
            }()
        }
        function _() {
            B.isCustomizing = !1,
            $("#game-link-wrapper").removeClass("customize-open"),
            $('#promo-links input[type="checkbox"]').remove(),
            $(".game-links a").each(function() {
                var e = $(this).text();
                $(this).text(e.replace(/^\s*|\s*$/g, "")),
                $(this).css("text-align", ""),
                $(this).off("click", U)
            }),
            $("#customize-menu").text("Customize..."),
            $("#close-menu").off("click", _)
        }
        function H(e, t) {
            var n = document.createElement("script");
            n.async = !0,
            n.src = e,
            n.onload = t;
            var a = document.getElementsByTagName("script")[0];
            return a.parentNode.insertBefore(n, a),
            n
        }
        $(function() {
            if ($("#mobile-menu").on("click touchstart", function(e) {
                if ($("body").hasClass("options-open"))
                    $("body").removeClass("options-open"),
                    e.preventDefault();
                else if ($("html").hasClass("appmode") && $("body").hasClass("rules-open"))
                    $("body").removeClass("rules-open"),
                    e.preventDefault();
                else if ($("html").hasClass("appmode") && $("body").hasClass("subview-open")) {
                    $("body").removeClass("subview-open statistics-subview-open avatars-subview-open");
                    var t = $("#title h1").data("real-title");
                    t && $("#title h1").text(t),
                    e.preventDefault()
                } else
                    B.toggle(e)
            }),
            $('a[href="#more-games"]').on("click", function(e) {
                V(),
                e.preventDefault(),
                B.open()
            }),
            $("#close-menu").on("click touchstart", function(e) {
                e.preventDefault(),
                B.close()
            }),
            APP_MODE)
                $('input[type="text"]').on("blur", function() {
                    0 !== document.documentElement.scrollTop && (document.documentElement.scrollTop = 0),
                    0 !== document.body.scrollTop && (document.body.scrollTop = 0)
                });
            else {
                $("#app-prompt a").on("click", function(e) {
                    var t = navigator.userAgent.match(/iPhone/i) ? "iPhoneAppLinkClick" : "AndroidAppLinkClick";
                    "no-thanks" === e.target.id ? (v(t, "No Thanks", 0, "", "", 1),
                    e.preventDefault()) : v(t, "Get App", 0, "", "", 1),
                    $("#app-prompt").slideUp()
                }),
                $("#fruit-monster-island a").on("click", function(e) {
                    var t, n = navigator.userAgent.match(/Android/i) ? "AndroidFruitPrompt" : "iOSFruitPrompt";
                    "no-fruit" === e.target.id ? (t = 0,
                    e.preventDefault()) : t = 1,
                    c(n, "", t),
                    $("#fruit-monster-island").slideUp()
                });
                var e = m(h);
                if (null !== e) {
                    var t = parseInt(e.split("_")[0]);
                    if (t && t + 31536e6 > (new Date).getTime()) {
                        s(function() {
                            return j.initialize()
                        }, 2e3),
                        $("html").addClass("gdpr-accepted");
                        var n = m(h).split("_")[2];
                        return -1 !== NON_GDPR_COUNTRES.indexOf(n) && $("html").addClass("non-gdpr-country"),
                        void (null === m("app_prompt") || APP_MODE ? function() {
                            m("androidprompt") && m("app_prompt", (new Date).getTime(), 4, "/");
                            try {
                                var e = navigator.userAgent
                                  , t = e.match(/Android (\d+)/i)
                                  , n = e.match(/iPhone OS (\d+)/)
                                  , a = e.match(/\biPad\b.* OS (\d+)/i)
                                  , i = t || n || a
                                  , r = "itms-apps://itunes.apple.com/app/apple-store/id1496007149";
                                if (null === m("app_prompt") && i) {
                                    var o = parseInt(i[1]);
                                    m("app_prompt", (new Date).getTime(), 4, "/"),
                                    a ? 12 <= o ? ($("#get-app, #app-icon").attr("href", r),
                                    v("iPadAppPrompt", o.toString(), 0, "", "", 1),
                                    $("#app-prompt").slideDown()) : v("iPadOldVersion", o.toString(), 0, "", "", 1) : n ? 12 <= o ? ($("#get-app, #app-icon").attr("href", r),
                                    v("iPhoneAppPrompt", o.toString(), 0, "", "", 1),
                                    $("#app-prompt").slideDown()) : v("iPhoneOldVersion", o.toString(), 0, "", "", 1) : t && (5 <= o ? ($("#get-app, #app-icon").attr("href", "market://details?id=io.cardgames.app"),
                                    v("AndroidAppPrompt", o.toString(), 0, "", "", 1),
                                    $("#app-prompt").slideDown()) : v("AndroidOldVersion", o.toString(), 0, "", "", 1))
                                }
                            } catch (e) {
                                v("AppPromptError", e.toString().substr(0, 200))
                            }
                        }() : function() {
                            try {
                                var e = navigator.userAgent
                                  , t = e.match(/Android (\d+)/i)
                                  , n = e.match(/iPhone OS (\d+)/)
                                  , a = e.match(/\biPad\b.* OS (\d+)/i)
                                  , i = t || n || a
                                  , r = parseInt(m("app_prompt"));
                                if ((new Date).getTime() - r < 18e4)
                                    return;
                                if (location.search.match(/gid=/))
                                    return;
                                if (null === m("fruit_prompt") && i) {
                                    var o = parseInt(i[1]);
                                    m("fruit_prompt", (new Date).getTime(), 30, "/"),
                                    a || n ? 10 <= o && ($("#get-fruit-monster-island").attr("href", "itms-apps://itunes.apple.com/app/apple-store/id1564432703?pt=118730957&ct=cardgames.io&mt=8"),
                                    $("#fruit-monster-island img").attr("src", "/shared/images/fruit-monster-island.png"),
                                    s(function() {
                                        return $("#fruit-monster-island").slideDown()
                                    }, 500)) : t && 7 <= o && ($("#get-fruit-monster-island").attr("href", "market://details?id=is.raudas.fruitmonsterisland"),
                                    $("#fruit-monster-island img").attr("src", "/shared/images/fruit-monster-island.png"),
                                    s(function() {
                                        return $("#fruit-monster-island").slideDown()
                                    }, 500))
                                }
                            } catch (e) {
                                c("FruitPromptError", e.toString().substr(0, 200))
                            }
                        }())
                    }
                    y(h),
                    b.set("acceptCookiesId", 0)
                }
                $.getJSON("/lambda/country").done(function(e) {
                    window.country = e.country,
                    -1 !== NON_GDPR_COUNTRES.indexOf(e.country) || !0 === navigator.standalone ? (m(h, (new Date).getTime() + "_true_" + e.country, 365, "/"),
                    s(function() {
                        return j.initialize()
                    }, 2e3),
                    $("html").addClass("gdpr-accepted").addClass("non-gdpr-country")) : s(function() {
                        return a(e.country)
                    }, 4e3)
                }).fail(function() {
                    return a("Unknown")
                })
            }
            function a(a) {
                $("#gdpr-notice").fadeIn(),
                $("#gdpr-agree").on("click", function(e) {
                    var t = $("#personalized-ads").is(":checked")
                      , n = (new Date).getTime();
                    m(h, n + "_" + t + "_" + a, 365, "/"),
                    e.preventDefault(),
                    $("#gdpr-notice").fadeOut(),
                    j.initialize(),
                    $("html").addClass("gdpr-accepted"),
                    c("GdprAccept", "", t ? 1 : 0),
                    p.gdpr.accept(t, navigator.userAgent, function(e) {
                        b.set("acceptCookiesId", e.acceptId)
                    }, function(e) {
                        f.error("Failed to save id of consent")
                    })
                })
            }
        }),
        window.NON_GDPR_COUNTRES = ["US", "CA", "AU"],
        !0 === navigator.standalone && $(document).on("click", "a", function(e) {
            var t = e.target.href;
            if (t && !t.match(/#/) && !t.match(/javascript:/)) {
                var n = location.protocol + "//" + location.host + "/";
                t.substr(0, n.length) === n && (e.preventDefault(),
                location.href = t)
            }
        }),
        $("#random-game").on("click", function() {
            var n = $('.game-links a[href^="/"]').toArray();
            i.shuffle(n);
            var a = 8;
            $("body").addClass("random-selection-process"),
            function e() {
                var t = n.pop();
                $(".random-highlight").removeClass("random-highlight"),
                $(t).addClass("random-highlight"),
                0 == --a ? ($(t).addClass("random-select"),
                s(function() {
                    return location.href = t.href
                }, 1e3)) : s(e, 450)
            }()
        }),
        window.facebookBorder = function(e) {
            devicePixelRatio;
            var t = Math.ceil(1200 / 630 * 800);
            $("#promo-links").remove(),
            $("#promo-mini").css("visibility", "hidden").css("height", "10px"),
            $("<div>").css({
                border: "solid 1px red",
                width: t,
                height: 800,
                position: "absolute",
                top: e || 0,
                left: Math.ceil(($(window).width() - t) / 2) - 1
            }).appendTo("body"),
            $(".underboard-message").css("visibility", "hidden"),
            $(".don-draper").remove(),
            $("#board-and-header").css("float", "none").css("margin", "auto")
        }
        ,
        $('a[href="#customize-menu"]').on("click", function(e) {
            if (e.preventDefault(),
            B.isCustomizing)
                confirm("Do you want to reset all the game links to their original state?") && (b.set("gameLinks", ""),
                W());
            else {
                B.isCustomizing = !0,
                $("#close-menu").on("click", _),
                $("#customize-menu").text("Reset links..."),
                $("#game-link-wrapper").addClass("customize-open");
                var n = {};
                $("#promo-mini a").each(function() {
                    n[$(this).text()] = this
                }),
                $(".game-links a").each(function() {
                    var e = $(this).text()
                      , t = $("<input/>", {
                        type: "checkbox",
                        value: e
                    });
                    e in n && t.attr("checked", "checked"),
                    $(this).hasClass("non-removable") && t.attr("disabled", "disabled"),
                    $(this).html(t.wrap("<div/>").parent().html() + " " + e).css("text-align", "left"),
                    $(this).on("click", U)
                })
            }
        }),
        $(".default-game-link").is(":visible") || $(".default-game-link").remove();
        var j = {
            type: showAds,
            adsAreReady: !1,
            initialize: function() {
                var e = this;
                if (!APP_MODE) {
                    var t = m("gdprconsent")
                      , n = !1;
                    if (t)
                        n = "true" === t.split("_")[1];
                    else
                        v("NoGdprCookie", navigator.userAgent + "\n" + document.cookie + "\n" + navigator.cookieEnabled);
                    var a = l(navigator.doNotTrack) || l(window.doNotTrack) || l(navigator.msDoNotTrack);
                    f.debug("ADS: Do not track is set: " + a),
                    this.requestPersonalized = n && !a,
                    "undefined" != typeof adsbygoogle && (adsbygoogle.requestNonPersonalizedAds = this.requestPersonalized ? 0 : 1,
                    f.debug("ADS: Set .requestNonPersonalizedAds to " + adsbygoogle.requestNonPersonalizedAds));
                    var i = "//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"
                      , r = "dev.cardgames.io" === location.hostname;
                    if ("none" !== this.type)
                        if (u() || b.alwaysUseInterstitialAds) {
                            0 === this.lastAdShown && (this.lastAdShown = (new Date).getTime() - 12e4),
                            $("ins.adslot_1, ins.adslot_2").remove(),
                            window.adsbygoogle = [];
                            var o = document.createElement("script");
                            o.async = !0,
                            o.src = i,
                            o.setAttribute("data-ad-client", "ca-pub-9002823967926225"),
                            o.setAttribute("data-ad-channel", window.customChannelId),
                            r && !D.realads && o.setAttribute("data-adbreak-test", "on"),
                            o.onload = function() {
                                f.debug("ADS: loaded script"),
                                adConfig({
                                    preloadAdBreaks: "on",
                                    sound: "off",
                                    onReady: function() {
                                        return e.adReady()
                                    }
                                })
                            }
                            ;
                            var s = document.getElementsByTagName("script")[0];
                            s.parentNode.insertBefore(o, s),
                            $("#draper-left, #draper-right").css("visibility", "hidden")
                        } else if ("adsense" === this.type) {
                            if (r && !D.ads)
                                return;
                            $(window).width() < 1354 && ($("ins.adslot_1").remove(),
                            adsbygoogle.pop()),
                            H(i)
                        }
                }
                function l(e) {
                    return "1" == e || !0 === e || "yes" == e
                }
            },
            trigger: function(e) {
                var t = this;
                if (APP_MODE) {
                    if (this.lastTrigger && (new Date).getTime() - this.lastTrigger < 300)
                        return void v("DoubleAdTrigger", "", 0, "", "", 1);
                    if (this.lastTrigger = (new Date).getTime(),
                    window.adCallback = function() {
                        console.log("APP: Got callback from native app"),
                        delete window.adCallback,
                        e()
                    }
                    ,
                    "undefined" != typeof Android)
                        console.log("APP: Sending ad message to Android..."),
                        window.Android.triggerAds();
                    else
                        try {
                            console.log("APP: Sending ad message to Swift..."),
                            window.webkit.messageHandlers.triggerAds.postMessage("TIME FOR SOME ADS")
                        } catch (e) {
                            if (!location.search.match(/appmode/))
                                throw e;
                            console.log("ARE IN SIMULATED APP MODE ON BROWSER, CALLING window.adCallback()"),
                            window.adCallback()
                        }
                } else {
                    if ("none" === this.type)
                        return f.debug("ADS: No ad triggered. Type=" + this.type),
                        void e();
                    if (!this.adsAreReady)
                        return f.debug("ADS: Ads API has not finished loading yet"),
                        void e();
                    var n = (new Date).getTime() - this.lastAdShown;
                    if (n < 24e4 && "immediate" !== D.ads)
                        return f.debug("ADS: Only " + n / 1e3 + " seconds since last ad was shown, not showing ad yet!"),
                        void e();
                    f.debug("ADS: Calling adBreak"),
                    this._callback === e && c("AdBreakSameCallback"),
                    this._callback = e,
                    this.testId && (c("AdBreakDoubleTrigger"),
                    clearTimeout(this.testId)),
                    this.testId = s(function() {
                        Array.prototype.slice.call(document.getElementsByTagName("iframe")).some(function(e) {
                            return $(e).is(":visible")
                        }) || c("AdBreakNoVisibleIframe", "Current time " + (new Date).toString() + "\n" + t.bf + "\n" + t.af + "\n" + t.abf)
                    }, 5e3),
                    adBreak({
                        type: "next",
                        name: "mobile-ads",
                        beforeAd: function() {
                            return t.beforeAd()
                        },
                        afterAd: function() {
                            return t.afterAd()
                        },
                        adBreakDone: function(e) {
                            return t.adBreakDone(e)
                        }
                    })
                }
            },
            get lastAdShown() {
                return parseInt(m("lastadshown")) || 0
            },
            set lastAdShown(e) {
                m("lastadshown", e, null, "/")
            },
            adReady: function() {
                f.debug("ADS: AdReady"),
                this.adsAreReady = !0
            },
            beforeAd: function() {
                f.debug("ADS: beforeAd called"),
                this.bf = "Before " + (new Date).toString()
            },
            afterAd: function() {
                f.debug("ADS: afterAd called"),
                this.af = "After " + (new Date).toString()
            },
            adBreakDone: function(e) {
                this.abf = "AdBreakDone: " + (new Date).toString(),
                f.debug("ADS: AdBreakDone: " + JSON.stringify(e, null, 2)),
                clearTimeout(this.testId),
                delete this.testId;
                var t = (new Date).getTime()
                  , n = this.lastAdShown;
                "viewed" === e.breakStatus && (this.lastAdShown = t,
                0 < n && c("AdIntervalManual", Math.round((t - n) / 1e3).toString()));
                var a = this._callback;
                delete this._callback,
                c("AdBreakDone", e.breakStatus),
                a && a()
            }
        };
        function V() {
            window.confettiEffect && (confettiEffect.stop(),
            $(".confetti-container").remove(),
            $("body").removeClass("confetti"),
            delete window.confettiEffect)
        }
        t.exports = {
            qs: D,
            cake: m,
            preloadBackgroundImage: function(e) {
                var t = $("<div/>");
                t.css("background-image", "url(" + e + ")").css("width", "1px").appendTo("body"),
                s(function() {
                    return t.remove()
                }, 50)
            },
            preloadBackgroundImageClass: function(e) {
                var t = $("<div/>");
                t.addClass(e).appendTo("body"),
                s(function() {
                    return t.remove()
                }, 50)
            },
            isEmojiValid: function(e) {
                return !0
            },
            ads: j,
            parseUserAgent: function(e) {
                e = e || navigator.userAgent;
                for (var t = {
                    browser: "Unknown",
                    os: "Unknown",
                    version: 0
                }, n = ["Windows", "Macintosh", "Android", "Linux", "iPhone", "iPad"], a = ["Opera", "Chrome", "Firefox", "Mobile Safari", "Safari", "MSIE"], i = 0; i < n.length; i++) {
                    if (new RegExp("\\b" + n[i] + "\\b","i").exec(e)) {
                        t.os = n[i];
                        break
                    }
                }
                for (var r = 0; r < a.length; r++) {
                    var o = new RegExp("\\b(" + a[r] + ")(?:/| )(\\d+)","i").exec(e);
                    if (o) {
                        t.browser = a[r],
                        "MSIE" == t.browser && (t.browser = "Internet Explorer");
                        var s = /\bVersion\/(\d+)\b/i.exec(e);
                        t.version = s ? parseInt(s[1]) : parseInt(o[2]);
                        break
                    }
                }
                return t
            },
            valentines: function(e) {
                try {
                    if (!($("#top-player").is(":visible") && $("#left-player").is(":visible") && $("#right-player").is(":visible")))
                        return;
                    if ("Bill" !== players.top.name || "Lisa" !== players.right.name)
                        return;
                    $("html").hasClass("valentines") && ($(".bubble p span").css("font-size", "12px"),
                    s(function() {
                        $("#top-player-bubble p span").text("Happy Valentine's day Lisa! ❤️️️️️️️❤️"),
                        $("#top-player-bubble").fadeIn()
                    }, 1500),
                    s(function() {
                        $("#right-player-bubble p span").text("😍️️").css("font-size", "40px"),
                        $("#right-player-bubble").fadeIn()
                    }, 3500),
                    s(function() {
                        $("#left-player-bubble p span").text("Enough already, let's play " + e + "!"),
                        $("#left-player-bubble").fadeIn()
                    }, 5500),
                    s(function() {
                        $(".bubble").hide(),
                        $(".bubble p span").css("font-size", "")
                    }, 9e3))
                } catch (e) {
                    v("ValentinesError", e.toString(), 0, "", "", 1)
                }
            },
            getFaceUrl: function(e, t) {
                if (e.toString().match(/^\d\d?$/))
                    return t ? "/shared/images/svg/face-" + e + "-sad.svg" : "/shared/images/svg/face-" + e + ".svg";
                var n = "https://cardgames.io/lambda/faces/" + e;
                return t && (n += "/sad"),
                n
            },
            getHairClass: function(e) {
                return e.length <= 2 ? "hair-" + e : "hair-" + e.charAt(2)
            },
            siteSettings: b,
            settings: d,
            browser: G,
            preloadImage: function(e) {
                if (!w[e]) {
                    var t = new Image;
                    t.src = e,
                    t.onload = function() {}
                    ,
                    t.onerror = function() {}
                    ,
                    w[e] = t
                }
            },
            trackEvent: v,
            forceTrackEvent: c,
            reloadPage: W,
            deleteCake: y,
            showConfetti: function() {
                b.confetti && H("/shared/effects/" + siteVersion + "/confetti.min.js", function() {
                    var e = $("<div>", {
                        "class": "confetti-container"
                    }).appendTo("html")
                      , t = u() || navigator.userAgent.match(/iPhone/);
                    window.confettiEffect = new Confetti(e.get(0),t ? 250 : 800),
                    confettiEffect.start(),
                    $("body").addClass("confetti"),
                    $(".confetti-container").on("click", V)
                })
            },
            removeConfetti: V,
            logError: L,
            mobileMenu: B,
            isMobileLookActive: u,
            GDPR_CONSENT_COOKIE: h,
            isDev: function() {
                return window.location.href.includes("dev.cardgames.io")
            }
        }
    }
    , {
        "./api": 9,
        "./gamecontrol": 12,
        "./helper-functions": 13
    }]
}, {}, [1]);